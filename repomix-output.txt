This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)


================================================================
Directory Structure
================================================================
public/
  file.svg
  globe.svg
  next.svg
  vercel.svg
  window.svg
src/
  app/
    api/
      like/
        route.ts
      matches/
        route.ts
      payment/
        create-order/
          route.ts
        verify/
          route.ts
      profile/
        route.ts
      user-check/
        route.ts
    cancellation-refund/
      page.tsx
    complete-profile/
      page.tsx
    contact-us/
      page.tsx
    matches/
      page.tsx
    people/
      page.tsx
    privacy-policy/
      page.tsx
    shipping-policy/
      page.tsx
    terms-and-conditions/
      page.tsx
    globals.css
    layout.tsx
    page.tsx
  components/
    Footer.tsx
  lib/
    mongodb.ts
  models/
    User.ts
  middleware.ts
.gitignore
eslint.config.mjs
next.config.js
next.config.ts
package.json
postcss.config.mjs
README.md
tsconfig.json
vercel.json

================================================================
Files
================================================================

================
File: src/app/api/payment/create-order/route.ts
================
// File: src/app/api/payment/create-order/route.ts

import { NextRequest, NextResponse } from "next/server";
import Razorpay from "razorpay";

export async function POST(request: NextRequest) {
	// --- Enhanced Debugging ---
	// This will show in your terminal. If you see "MISSING", your .env.local file is not working.
	console.log("--- Checking Environment Variables ---");
	console.log(
		"RAZORPAY_KEY_ID:",
		process.env.RAZORPAY_KEY_ID ? "Loaded" : "MISSING"
	);
	console.log(
		"RAZORPAY_KEY_SECRET:",
		process.env.RAZORPAY_KEY_SECRET ? "Loaded" : "MISSING"
	);
	console.log("------------------------------------");

	const razorpayKeyId = process.env.RAZORPAY_KEY_ID;
	const razorpayKeySecret = process.env.RAZORPAY_KEY_SECRET;

	if (!razorpayKeyId || !razorpayKeySecret) {
		console.error(
			"CRITICAL: Razorpay API keys are not set in environment variables."
		);
		return NextResponse.json(
			{
				error: "Payment gateway is not configured. API keys are missing on the server.",
			},
			{ status: 500 }
		);
	}

	try {
		// Initialize Razorpay inside the try block to catch any initialization errors
		const razorpay = new Razorpay({
			key_id: razorpayKeyId,
			key_secret: razorpayKeySecret,
		});

		const { amount, currency } = await request.json();

		if (amount == null || currency == null) {
			return NextResponse.json(
				{ error: "Amount and currency are required." },
				{ status: 400 }
			);
		}

		const options = {
			amount: amount * 100, // Amount in the smallest currency unit (e.g., paise for INR)
			currency: currency.toUpperCase(),
			receipt: `receipt_order_${new Date().getTime()}`,
		};

		console.log("Creating Razorpay order with options:", options);

		const order = await razorpay.orders.create(options);
		console.log("Razorpay order created successfully:", order);

		if (!order) {
			console.error(
				"Razorpay order creation returned null or undefined."
			);
			return NextResponse.json(
				{
					error: "Failed to create order with Razorpay. The response was empty.",
				},
				{ status: 500 }
			);
		}

		return NextResponse.json({
			orderId: order.id,
			currency: order.currency,
			amount: order.amount,
			key: razorpayKeyId,
		});
	} catch (error: any) {
		// --- This is the most important part for debugging ---
		console.error("--- FULL ERROR OBJECT FROM RAZORPAY ---");
		console.error(error);
		console.error("---------------------------------------");

		// Razorpay often nests the real error description. Let's log it if it exists.
		if (error.error && error.error.description) {
			console.error(
				"Razorpay Error Description:",
				error.error.description
			);
		}

		const errorMessage =
			error.error?.description ||
			error.message ||
			"An unknown error occurred on the server.";

		return NextResponse.json(
			{
				error: `Internal server error: ${errorMessage}`,
				details: error, // Send the full error details to the client for inspection
			},
			{ status: 500 }
		);
	}
}

================
File: src/app/api/payment/verify/route.ts
================
import { NextRequest, NextResponse } from "next/server";
import crypto from "crypto";
import clientPromise from "@/lib/mongodb";

export async function POST(request: NextRequest) {
	try {
		const { orderId, paymentId, signature, userId, matchId } =
			await request.json();

		if (!orderId || !paymentId || !signature || !userId || !matchId) {
			return NextResponse.json(
				{ error: "Missing required payment details" },
				{ status: 400 }
			);
		}

		// Verify payment signature
		const hmac = crypto.createHmac(
			"sha256",
			process.env.RAZORPAY_KEY_SECRET!
		);
		hmac.update(`${orderId}|${paymentId}`);
		const generatedSignature = hmac.digest("hex");

		if (generatedSignature !== signature) {
			return NextResponse.json(
				{ error: "Payment verification failed" },
				{ status: 400 }
			);
		}

		// Update user's revealed matches in database
		const client = await clientPromise;
		const db = client.db("seeyou");
		const collection = db.collection("users");

		await collection.updateOne(
			{ clerkId: userId },
			{
				$addToSet: { revealedMatches: matchId },
				$push: {
					payments: {
						matchId,
						paymentId,
						orderId,
						amount: 29,
						date: new Date(),
					},
				},
				$set: { updatedAt: new Date() },
			},
			{ upsert: true }
		);

		return NextResponse.json({
			success: true,
			message: "Payment verified successfully",
		});
	} catch (error) {
		console.error("Error verifying payment:", error);
		return NextResponse.json(
			{ error: "Internal server error" },
			{ status: 500 }
		);
	}
}

================
File: public/file.svg
================
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>

================
File: public/globe.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>

================
File: public/next.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>

================
File: public/vercel.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>

================
File: public/window.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>

================
File: src/app/api/like/route.ts
================
import { NextRequest, NextResponse } from "next/server";
import clientPromise from "@/lib/mongodb";
import { UserProfile } from "@/models/User";

export async function POST(request: NextRequest) {
	try {
		const body = await request.json();
		const { likerId, likedId } = body;

		if (!likerId || !likedId) {
			return NextResponse.json(
				{ error: "LikerId and likedId are required" },
				{ status: 400 }
			);
		}

		const client = await clientPromise;
		const db = client.db("seeyou");
		const collection = db.collection<UserProfile>("users");

		// Add likedId to liker's likes array
		await collection.updateOne(
			{ clerkId: likerId },
			{
				$addToSet: { likes: likedId },
				$set: { updatedAt: new Date() },
			}
		);

		// Check if the liked user has also liked the liker
		const likedUser = await collection.findOne({ clerkId: likedId });

		let isMatch = false;
		if (likedUser && likedUser.likes && likedUser.likes.includes(likerId)) {
			// It's a match! Add both users to each other's matches
			isMatch = true;

			// Add to liker's matches
			await collection.updateOne(
				{ clerkId: likerId },
				{
					$addToSet: { matches: likedId },
					$set: { updatedAt: new Date() },
				}
			);

			// Add to liked user's matches
			await collection.updateOne(
				{ clerkId: likedId },
				{
					$addToSet: { matches: likerId },
					$set: { updatedAt: new Date() },
				}
			);
		}

		return NextResponse.json({ success: true, isMatch });
	} catch (error) {
		console.error("Error processing like:", error);
		return NextResponse.json(
			{ error: "Internal server error" },
			{ status: 500 }
		);
	}
}

================
File: src/app/api/matches/route.ts
================
import { NextRequest, NextResponse } from "next/server";
import clientPromise from "@/lib/mongodb";
import { UserProfile } from "@/models/User";

export async function GET(request: NextRequest) {
	try {
		const { searchParams } = new URL(request.url);
		const currentUserId = searchParams.get("currentUserId");

		if (!currentUserId) {
			return NextResponse.json(
				{ error: "Current user ID is required" },
				{ status: 400 }
			);
		}

		const client = await clientPromise;
		const db = client.db("seeyou");
		const collection = db.collection<UserProfile>("users");

		// Get current user's matches array
		const currentUser = await collection.findOne({
			clerkId: currentUserId,
		});

		if (!currentUser || !currentUser.matches) {
			return NextResponse.json({ matches: [] });
		}

		// Fetch full profile details of matched users
		const matchedUsers = await collection
			.find(
				{ clerkId: { $in: currentUser.matches } },
				{
					projection: {
						clerkId: 1,
						name: 1,
						lastName: 1,
						photoUrl: 1,
						phone: 1,
						instagramId: 1,
					},
				}
			)
			.toArray();

		return NextResponse.json({ matches: matchedUsers });
	} catch (error) {
		console.error("Error fetching matches:", error);
		return NextResponse.json(
			{ error: "Internal server error" },
			{ status: 500 }
		);
	}
}

================
File: src/app/api/profile/route.ts
================
import { NextRequest, NextResponse } from "next/server";
import clientPromise from "@/lib/mongodb";
import { UserProfile } from "@/models/User";

export async function GET(request: NextRequest) {
	try {
		const { searchParams } = new URL(request.url);
		const currentUserId = searchParams.get("currentUserId");

		if (!currentUserId) {
			return NextResponse.json(
				{ error: "Current user ID is required" },
				{ status: 400 }
			);
		}

		const client = await clientPromise;
		const db = client.db("seeyou");
		const collection = db.collection<UserProfile>("users");

		// Fetch all users except the current user
		const users = await collection
			.find(
				{ clerkId: { $ne: currentUserId } },
				{
					projection: {
						clerkId: 1,
						name: 1,
						lastName: 1,
						photoUrl: 1,
					},
				}
			)
			.toArray();

		return NextResponse.json({ users });
	} catch (error) {
		console.error("Error fetching users:", error);
		return NextResponse.json(
			{ error: "Internal server error" },
			{ status: 500 }
		);
	}
}

export async function POST(request: NextRequest) {
	try {
		const body = await request.json();
		const { clerkId, name, lastName, phone, instagramId, photoUrl } = body;

		if (!clerkId || !name) {
			return NextResponse.json(
				{ error: "ClerkId and name are required" },
				{ status: 400 }
			);
		}

		const client = await clientPromise;
		const db = client.db("seeyou");
		const collection = db.collection<UserProfile>("users");

		const userProfile: UserProfile = {
			clerkId,
			name,
			lastName: lastName || "",
			phone: phone || "",
			instagramId: instagramId || "",
			photoUrl: photoUrl || "",
			likes: [],
			matches: [],
			createdAt: new Date(),
			updatedAt: new Date(),
		};

		// Check if user already exists
		const existingUser = await collection.findOne({ clerkId });

		if (existingUser) {
			// Update existing user but preserve likes and matches
			await collection.updateOne(
				{ clerkId },
				{
					$set: {
						name: userProfile.name,
						lastName: userProfile.lastName,
						phone: userProfile.phone,
						instagramId: userProfile.instagramId,
						photoUrl: userProfile.photoUrl,
						updatedAt: new Date(),
					},
				}
			);
		} else {
			// Create new user with empty likes and matches arrays
			await collection.insertOne(userProfile);
		}

		return NextResponse.json({ success: true });
	} catch (error) {
		console.error("Error saving profile:", error);
		return NextResponse.json(
			{ error: "Internal server error" },
			{ status: 500 }
		);
	}
}

================
File: src/app/api/user-check/route.ts
================
import { NextRequest, NextResponse } from "next/server";
import clientPromise from "@/lib/mongodb";
import { UserProfile } from "@/models/User";

export async function GET(request: NextRequest) {
	try {
		const { searchParams } = new URL(request.url);
		const clerkId = searchParams.get("clerkId");

		if (!clerkId) {
			return NextResponse.json(
				{ error: "ClerkId is required" },
				{ status: 400 }
			);
		}

		const client = await clientPromise;
		const db = client.db("seeyou");
		const collection = db.collection<UserProfile>("users");

		const user = await collection.findOne({ clerkId });

		return NextResponse.json({
			exists: !!user,
			user: user
				? {
						name: user.name,
						lastName: user.lastName,
						photoUrl: user.photoUrl,
						phone: user.phone,
						instagramId: user.instagramId,
						likes: user.likes || [],
						matches: user.matches || [],
				  }
				: null,
		});
	} catch (error) {
		console.error("Error checking user:", error);
		return NextResponse.json(
			{ error: "Internal server error" },
			{ status: 500 }
		);
	}
}

================
File: src/components/Footer.tsx
================
import React from 'react';
import Link from 'next/link';

export default function Footer() {
  return (
    <footer className="bg-gradient-to-r from-pink-600 to-purple-700 text-white">
      <div className="max-w-7xl mx-auto px-4 py-12">
        <div className="grid grid-cols-1 md:grid-cols-4 gap-8">
          {/* Brand Section */}
          <div className="space-y-4">
            <h3 className="text-2xl font-bold">SeeYou</h3>
            <p className="text-pink-100">
              Find your perfect match and create meaningful connections. 
              Love is just a swipe away.
            </p>
            <div className="flex space-x-4">
              <a href="#" className="text-pink-200 hover:text-white transition-colors">
                <svg className="w-6 h-6" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M24 4.557c-.883.392-1.832.656-2.828.775 1.017-.609 1.798-1.574 2.165-2.724-.951.564-2.005.974-3.127 1.195-.897-.957-2.178-1.555-3.594-1.555-3.179 0-5.515 2.966-4.797 6.045-4.091-.205-7.719-2.165-10.148-5.144-1.29 2.213-.669 5.108 1.523 6.574-.806-.026-1.566-.247-2.229-.616-.054 2.281 1.581 4.415 3.949 4.89-.693.188-1.452.232-2.224.084.626 1.956 2.444 3.379 4.6 3.419-2.07 1.623-4.678 2.348-7.29 2.04 2.179 1.397 4.768 2.212 7.548 2.212 9.142 0 14.307-7.721 13.995-14.646.962-.695 1.797-1.562 2.457-2.549z"/>
                </svg>
              </a>
              <a href="#" className="text-pink-200 hover:text-white transition-colors">
                <svg className="w-6 h-6" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M22.46 6c-.77.35-1.6.58-2.46.69.88-.53 1.56-1.37 1.88-2.38-.83.5-1.75.85-2.72 1.05C18.37 4.5 17.26 4 16 4c-2.35 0-4.27 1.92-4.27 4.29 0 .34.04.67.11.98C8.28 9.09 5.11 7.38 3 4.79c-.37.63-.58 1.37-.58 2.15 0 1.49.75 2.81 1.91 3.56-.71 0-1.37-.2-1.95-.5v.03c0 2.08 1.48 3.82 3.44 4.21a4.22 4.22 0 0 1-1.93.07 4.28 4.28 0 0 0 4 2.98 8.521 8.521 0 0 1-5.33 1.84c-.34 0-.68-.02-1.02-.06C3.44 20.29 5.7 21 8.12 21 16 21 20.33 14.46 20.33 8.79c0-.19 0-.37-.01-.56.84-.6 1.56-1.36 2.14-2.23z"/>
                </svg>
              </a>
              <a href="#" className="text-pink-200 hover:text-white transition-colors">
                <svg className="w-6 h-6" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M12.017 0C5.396 0 .029 5.367.029 11.987c0 5.079 3.158 9.417 7.618 11.174-.105-.949-.199-2.403.041-3.439.219-.937 1.406-5.957 1.406-5.957s-.359-.72-.359-1.781c0-1.663.967-2.911 2.168-2.911 1.024 0 1.518.769 1.518 1.688 0 1.029-.653 2.567-.992 3.992-.285 1.193.6 2.165 1.775 2.165 2.128 0 3.768-2.245 3.768-5.487 0-2.861-2.063-4.869-5.008-4.869-3.41 0-5.409 2.562-5.409 5.199 0 1.033.394 2.143.889 2.741.099.12.112.225.085.345-.09.375-.293 1.199-.334 1.363-.053.225-.172.271-.402.165-1.495-.69-2.433-2.878-2.433-4.646 0-3.776 2.748-7.252 7.92-7.252 4.158 0 7.392 2.967 7.392 6.923 0 4.135-2.607 7.462-6.233 7.462-1.214 0-2.357-.629-2.746-1.378l-.748 2.853c-.271 1.043-1.002 2.35-1.492 3.146C9.57 23.812 10.763 24.009 12.017 24.009c6.624 0 11.99-5.367 11.99-11.988C24.007 5.367 18.641.001.012.001z"/>
                </svg>
              </a>
              <a href="#" className="text-pink-200 hover:text-white transition-colors">
                <svg className="w-6 h-6" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M12.544 12.168c.77.001 1.393.623 1.394 1.393v5.858c0 .77-.623 1.394-1.393 1.394H5.687c-.77 0-1.394-.623-1.394-1.393V12.56c0-.77.623-1.394 1.393-1.394h6.857zm-3.428-8.88a5.585 5.585 0 1 1 0 11.17 5.585 5.585 0 0 1 0-11.17zm0 2.233a3.352 3.352 0 1 0 0 6.704 3.352 3.352 0 0 0 0-6.704zm5.596-.436a1.31 1.31 0 1 1 0 2.62 1.31 1.31 0 0 1 0-2.62z"/>
                </svg>
              </a>
            </div>
          </div>

          {/* Company Links */}
          <div className="space-y-4">
            <h4 className="text-lg font-semibold">Company</h4>
            <ul className="space-y-2">
              <li><Link href="/about" className="text-pink-200 hover:text-white transition-colors">About Us</Link></li>
              <li><Link href="/careers" className="text-pink-200 hover:text-white transition-colors">Careers</Link></li>
              <li><Link href="/press" className="text-pink-200 hover:text-white transition-colors">Press</Link></li>
              <li><Link href="/blog" className="text-pink-200 hover:text-white transition-colors">Blog</Link></li>
              <li><Link href="/investors" className="text-pink-200 hover:text-white transition-colors">Investors</Link></li>
            </ul>
          </div>

          {/* Support Links */}
          <div className="space-y-4">
            <h4 className="text-lg font-semibold">Support</h4>
            <ul className="space-y-2">
              <li><Link href="/contact-us" className="text-pink-200 hover:text-white transition-colors">Contact Us</Link></li>
              <li><Link href="/help" className="text-pink-200 hover:text-white transition-colors">Help Center</Link></li>
              <li><Link href="/safety" className="text-pink-200 hover:text-white transition-colors">Safety Tips</Link></li>
              <li><Link href="/community" className="text-pink-200 hover:text-white transition-colors">Community Guidelines</Link></li>
              <li><Link href="/feedback" className="text-pink-200 hover:text-white transition-colors">Feedback</Link></li>
            </ul>
          </div>

          {/* Legal Links */}
          <div className="space-y-4">
            <h4 className="text-lg font-semibold">Legal</h4>
            <ul className="space-y-2">
              <li><Link href="/privacy-policy" className="text-pink-200 hover:text-white transition-colors">Privacy Policy</Link></li>
              <li><Link href="/terms-and-conditions" className="text-pink-200 hover:text-white transition-colors">Terms & Conditions</Link></li>
              <li><Link href="/cancellation-refund" className="text-pink-200 hover:text-white transition-colors">Cancellation & Refund</Link></li>
              <li><Link href="/shipping-policy" className="text-pink-200 hover:text-white transition-colors">Shipping Policy</Link></li>
              <li><Link href="/cookie-policy" className="text-pink-200 hover:text-white transition-colors">Cookie Policy</Link></li>
            </ul>
          </div>
        </div>

        {/* Bottom Section */}
        <div className="border-t border-pink-400 mt-12 pt-8">
          <div className="flex flex-col md:flex-row justify-between items-center space-y-4 md:space-y-0">
            <div className="text-pink-200">
              <p>&copy; 2024 SeeYou. All rights reserved.</p>
            </div>
            
            <div className="flex items-center space-x-6">
              <div className="flex items-center space-x-2 text-pink-200">
                <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
                </svg>
                <span className="text-sm">Safe & Secure</span>
              </div>
              
              <div className="flex items-center space-x-2 text-pink-200">
                <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M12 1l3.09 6.26L22 9l-5 4.87L18.18 21 12 17.27 5.82 21 7 13.87 2 9l6.91-1.74L12 1z"/>
                </svg>
                <span className="text-sm">4.8★ Rating</span>
              </div>
              
              <div className="flex items-center space-x-2 text-pink-200">
                <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M16 1H8C6.34 1 5 2.34 5 4v16c0 1.66 1.34 3 3 3h8c1.66 0 3-1.34 3-3V4c0-1.66-1.34-3-3-3z"/>
                </svg>
                <span className="text-sm">Mobile App</span>
              </div>
            </div>
          </div>
          
          <div className="text-center mt-6 text-pink-200 text-sm">
            <p>Made with ❤️ for people seeking love and meaningful connections</p>
          </div>
        </div>
      </div>
    </footer>
  );
}

================
File: src/models/User.ts
================
export interface UserProfile {
	clerkId: string;
	name: string;
	lastName?: string;
	phone?: string;
	instagramId?: string;
	photoUrl?: string;
	likes: string[];
	matches: string[];
	revealedMatches?: string[];
	payments?: Array<{
		matchId: string;
		paymentId: string;
		orderId: string;
		amount: number;
		date: Date;
	}>;
	createdAt: Date;
	updatedAt: Date;
}

================
File: src/middleware.ts
================
import { clerkMiddleware, createRouteMatcher } from "@clerk/nextjs/server";

const isProtectedRoute = createRouteMatcher(["/dashboard(.*)", "/profile(.*)"]);

export default clerkMiddleware(async (auth, req) => {
	if (isProtectedRoute(req)) await auth.protect();
});

export const config = {
	matcher: [
		"/((?!_next|[^?]*\\.(?:html?|css|js(?!on)|jpe?g|webp|png|gif|svg|ttf|woff2?|ico|csv|docx?|xlsx?|zip|webmanifest)).*)",
		"/(api|trpc)(.*)",
	],
};

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

================
File: eslint.config.mjs
================
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;

================
File: next.config.ts
================
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
};

export default nextConfig;

================
File: postcss.config.mjs
================
const config = {
  plugins: ["@tailwindcss/postcss"],
};

export default config;

================
File: README.md
================
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}

================
File: src/app/contact-us/page.tsx
================
import React from 'react';

export default function ContactUs() {
  return (
    <div className="min-h-screen bg-gradient-to-br from-pink-50 to-purple-50 py-12 px-4">
      <div className="max-w-4xl mx-auto">
        <div className="text-center mb-12">
          <h1 className="text-4xl font-bold text-gray-800 mb-4">Contact Us</h1>
          <p className="text-lg text-gray-600">
            We&apos;re here to help you find love and make meaningful connections
          </p>
        </div>

        <div className="grid md:grid-cols-2 gap-8">
          <div className="bg-white rounded-lg shadow-lg p-8">
            <h2 className="text-2xl font-semibold text-gray-800 mb-6">Get in Touch</h2>
            <form className="space-y-6">
              <div>
                <label className="block text-gray-700 font-medium mb-2">Full Name</label>
                <input 
                  type="text" 
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent"
                  placeholder="Your full name"
                />
              </div>
              <div>
                <label className="block text-gray-700 font-medium mb-2">Email Address</label>
                <input 
                  type="email" 
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent"
                  placeholder="your.email@example.com"
                />
              </div>
              <div>
                <label className="block text-gray-700 font-medium mb-2">Subject</label>
                <select className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent">
                  <option>General Inquiry</option>
                  <option>Account Issues</option>
                  <option>Payment Problems</option>
                  <option>Safety Concerns</option>
                  <option>Feature Request</option>
                  <option>Bug Report</option>
                </select>
              </div>
              <div>
                <label className="block text-gray-700 font-medium mb-2">Message</label>
                <textarea 
                  rows={5}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-pink-500 focus:border-transparent"
                  placeholder="Tell us how we can help you..."
                ></textarea>
              </div>
              <button 
                type="submit"
                className="w-full bg-gradient-to-r from-pink-500 to-purple-600 text-white font-semibold py-3 px-6 rounded-lg hover:from-pink-600 hover:to-purple-700 transition duration-300"
              >
                Send Message
              </button>
            </form>
          </div>

          <div className="bg-white rounded-lg shadow-lg p-8">
            <h2 className="text-2xl font-semibold text-gray-800 mb-6">Other Ways to Reach Us</h2>
            
            <div className="space-y-6">
              <div className="flex items-start space-x-4">
                <div className="bg-pink-100 p-3 rounded-full">
                  <svg className="w-6 h-6 text-pink-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                  </svg>
                </div>
                <div>
                  <h3 className="font-semibold text-gray-800">Email Support</h3>
                  <p className="text-gray-600">support@seeyou.com</p>
                  <p className="text-sm text-gray-500">We respond within 24 hours</p>
                </div>
              </div>

              <div className="flex items-start space-x-4">
                <div className="bg-purple-100 p-3 rounded-full">
                  <svg className="w-6 h-6 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
                  </svg>
                </div>
                <div>
                  <h3 className="font-semibold text-gray-800">Phone Support</h3>
                  <p className="text-gray-600">+1 (555) 123-LOVE</p>
                  <p className="text-sm text-gray-500">Mon-Fri 9AM-6PM EST</p>
                </div>
              </div>

              <div className="flex items-start space-x-4">
                <div className="bg-blue-100 p-3 rounded-full">
                  <svg className="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
                  </svg>
                </div>
                <div>
                  <h3 className="font-semibold text-gray-800">Live Chat</h3>
                  <p className="text-gray-600">Available 24/7</p>
                  <p className="text-sm text-gray-500">Click the chat icon in the bottom right</p>
                </div>
              </div>

              <div className="mt-8 p-4 bg-gradient-to-r from-pink-50 to-purple-50 rounded-lg">
                <h3 className="font-semibold text-gray-800 mb-2">Safety First</h3>
                <p className="text-sm text-gray-600">
                  If you need to report someone or have safety concerns, please contact us immediately. 
                  Your safety is our top priority.
                </p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

================
File: src/app/privacy-policy/page.tsx
================
import React from 'react';

export default function PrivacyPolicy() {
  return (
    <div className="min-h-screen bg-gradient-to-br from-pink-50 to-purple-50 py-12 px-4">
      <div className="max-w-4xl mx-auto bg-white rounded-lg shadow-lg p-8">
        <div className="text-center mb-12">
          <h1 className="text-4xl font-bold text-gray-800 mb-4">Privacy Policy</h1>
          <p className="text-lg text-gray-600">
            Your privacy and security are our top priorities
          </p>
          <p className="text-sm text-gray-500 mt-2">Last updated: January 2024</p>
        </div>

        <div className="prose max-w-none space-y-8">
          <section>
            <h2 className="text-2xl font-semibold text-gray-800 mb-4">1. Information We Collect</h2>
            
            <div className="grid md:grid-cols-2 gap-6 mb-6">
              <div className="bg-blue-50 p-6 rounded-lg">
                <h3 className="font-semibold text-blue-800 mb-3">Account Information</h3>
                <ul className="space-y-2 text-blue-700">
                  <li>• Name and age</li>
                  <li>• Email address</li>
                  <li>• Phone number (optional)</li>
                  <li>• Profile photos</li>
                  <li>• Location data</li>
                  <li>• Dating preferences</li>
                </ul>
              </div>
              
              <div className="bg-purple-50 p-6 rounded-lg">
                <h3 className="font-semibold text-purple-800 mb-3">Usage Information</h3>
                <ul className="space-y-2 text-purple-700">
                  <li>• App interactions</li>
                  <li>• Messages and communications</li>
                  <li>• Device information</li>
                  <li>• IP address</li>
                  <li>• Browsing behavior</li>
                  <li>• Match preferences</li>
                </ul>
              </div>
            </div>
          </section>

          <section>
            <h2 className="text-2xl font-semibold text-gray-800 mb-4">2. How We Use Your Information</h2>
            <div className="space-y-4">
              <div className="border-l-4 border-pink-500 pl-6">
                <h3 className="font-semibold text-gray-800 mb-2">Matching & Recommendations</h3>
                <p className="text-gray-600">
                  We use your preferences, location, and behavior to suggest compatible matches and improve our algorithm.
                </p>
              </div>
              
              <div className="border-l-4 border-purple-500 pl-6">
                <h3 className="font-semibold text-gray-800 mb-2">Safety & Security</h3>
                <p className="text-gray-600">
                  Your information helps us detect and prevent fraud, harassment, and other harmful activities.
                </p>
              </div>
              
              <div className="border-l-4 border-blue-500 pl-6">
                <h3 className="font-semibold text-gray-800 mb-2">Communication</h3>
                <p className="text-gray-600">
                  We facilitate secure messaging between users and send important service updates.
                </p>
              </div>
            </div>
          </section>

          <section>
            <h2 className="text-2xl font-semibold text-gray-800 mb-4">3. Information Sharing</h2>
            
            <div className="bg-red-50 border border-red-200 rounded-lg p-6 mb-6">
              <h3 className="font-semibold text-red-800 mb-3">We Never Sell Your Personal Data</h3>
              <p className="text-red-700">
                SeeYou will never sell, rent, or trade your personal information to third parties for marketing purposes.
              </p>
            </div>

            <div className="space-y-4">
              <h3 className="font-semibold text-gray-800">Limited Sharing Circumstances:</h3>
              <ul className="list-disc pl-6 space-y-2 text-gray-600">
                <li>With other users (only information you choose to share in your profile)</li>
                <li>With service providers who help operate our platform (under strict confidentiality)</li>
                <li>When required by law or to protect user safety</li>
                <li>In case of business merger or acquisition (with prior notice)</li>
              </ul>
            </div>
          </section>

          <section>
            <h2 className="text-2xl font-semibold text-gray-800 mb-4">4. Your Privacy Controls</h2>
            
            <div className="grid md:grid-cols-2 gap-6">
              <div className="bg-green-50 p-6 rounded-lg">
                <h3 className="font-semibold text-green-800 mb-3">Profile Visibility</h3>
                <ul className="space-y-2 text-green-700">
                  <li>• Control who can see your profile</li>
                  <li>• Hide your profile temporarily</li>
                  <li>• Block specific users</li>
                  <li>• Limit distance visibility</li>
                </ul>
              </div>
              
              <div className="bg-orange-50 p-6 rounded-lg">
                <h3 className="font-semibold text-orange-800 mb-3">Data Management</h3>
                <ul className="space-y-2 text-orange-700">
                  <li>• Download your data</li>
                  <li>• Delete specific information</li>
                  <li>• Control marketing communications</li>
                  <li>• Manage cookie preferences</li>
                </ul>
              </div>
            </div>
          </section>

          <section>
            <h2 className="text-2xl font-semibold text-gray-800 mb-4">5. Data Security</h2>
            <div className="bg-blue-50 border border-blue-200 rounded-lg p-6">
              <h3 className="font-semibold text-blue-800 mb-3">Security Measures</h3>
              <div className="grid md:grid-cols-2 gap-4 text-blue-700">
                <ul className="space-y-2">
                  <li>• End-to-end encryption for messages</li>
                  <li>• Secure data storage</li>
                  <li>• Regular security audits</li>
                  <li>• Two-factor authentication</li>
                </ul>
                <ul className="space-y-2">
                  <li>• Photo verification system</li>
                  <li>• AI-powered content moderation</li>
                  <li>• 24/7 security monitoring</li>
                  <li>• HTTPS encryption</li>
                </ul>
              </div>
            </div>
          </section>

          <section>
            <h2 className="text-2xl font-semibold text-gray-800 mb-4">6. Location Information</h2>
            <p className="text-gray-600 mb-4">
              We use your location to show you nearby matches and relevant local features. You can control location 
              sharing in your device settings or app preferences.
            </p>
            <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
              <p className="text-yellow-800">
                <strong>Note:</strong> Disabling location may limit some features like nearby matches and location-based safety tools.
              </p>
            </div>
          </section>

          <section>
            <h2 className="text-2xl font-semibold text-gray-800 mb-4">7. Data Retention</h2>
            <div className="space-y-4">
              <p className="text-gray-600">
                We retain your information only as long as necessary to provide our services and comply with legal obligations.
              </p>
              <div className="bg-gray-50 p-6 rounded-lg">
                <h3 className="font-semibold text-gray-800 mb-3">Retention Periods</h3>
                <ul className="space-y-2 text-gray-600">
                  <li>• <strong>Active accounts:</strong> Information retained while account is active</li>
                  <li>• <strong>Deleted accounts:</strong> Most data deleted within 30 days</li>
                  <li>• <strong>Legal compliance:</strong> Some data may be retained longer as required by law</li>
                  <li>• <strong>Safety records:</strong> Records of policy violations may be kept for safety purposes</li>
                </ul>
              </div>
            </div>
          </section>

          <section>
            <h2 className="text-2xl font-semibold text-gray-800 mb-4">8. Your Rights</h2>
            <div className="grid md:grid-cols-2 gap-6">
              <div>
                <h3 className="font-semibold text-gray-800 mb-3">Access & Control</h3>
                <ul className="list-disc pl-6 space-y-2 text-gray-600">
                  <li>Request a copy of your data</li>
                  <li>Correct inaccurate information</li>
                  <li>Delete your account and data</li>
                  <li>Object to certain data processing</li>
                </ul>
              </div>
              <div>
                <h3 className="font-semibold text-gray-800 mb-3">Communication</h3>
                <ul className="list-disc pl-6 space-y-2 text-gray-600">
                  <li>Opt out of marketing emails</li>
                  <li>Control push notifications</li>
                  <li>Manage contact preferences</li>
                  <li>Report privacy concerns</li>
                </ul>
              </div>
            </div>
          </section>

          <section>
            <h2 className="text-2xl font-semibold text-gray-800 mb-4">9. Children&apos;s Privacy</h2>
            <div className="bg-red-50 border border-red-200 rounded-lg p-6">
              <p className="text-red-800 font-semibold mb-2">Age Restriction</p>
              <p className="text-red-700">
                SeeYou is intended for users 18 years and older. We do not knowingly collect information from anyone under 18. 
                If you believe a user is under 18, please report them immediately.
              </p>
            </div>
          </section>

          <section>
            <h2 className="text-2xl font-semibold text-gray-800 mb-4">10. International Users</h2>
            <p className="text-gray-600">
              SeeYou operates globally. By using our service, you consent to the transfer of your information to countries 
              where we operate, which may have different privacy laws than your country of residence.
            </p>
          </section>

          <section>
            <h2 className="text-2xl font-semibold text-gray-800 mb-4">11. Changes to This Policy</h2>
            <p className="text-gray-600">
              We may update this Privacy Policy from time to time. We&apos;ll notify you of significant changes through the app 
              or by email. Your continued use of SeeYou after changes indicates your acceptance of the updated policy.
            </p>
          </section>

          <section>
            <h2 className="text-2xl font-semibold text-gray-800 mb-4">12. Contact Us</h2>
            <div className="bg-pink-50 border border-pink-200 rounded-lg p-6">
              <h3 className="font-semibold text-pink-800 mb-3">Privacy Questions?</h3>
              <div className="space-y-2 text-pink-700">
                <p>📧 Email: <a href="mailto:privacy@seeyou.com" className="underline">privacy@seeyou.com</a></p>
                <p>📞 Phone: +1 (555) 123-LOVE</p>
                <p>📍 Address: SeeYou Privacy Team, 123 Love Street, Romance City, RC 12345</p>
              </div>
            </div>
          </section>
        </div>
      </div>
    </div>
  );
}

================
File: src/app/terms-and-conditions/page.tsx
================
import React from 'react';

export default function TermsAndConditions() {
  return (
    <div className="min-h-screen bg-gradient-to-br from-pink-50 to-purple-50 py-12 px-4">
      <div className="max-w-4xl mx-auto bg-white rounded-lg shadow-lg p-8">
        <div className="text-center mb-12">
          <h1 className="text-4xl font-bold text-gray-800 mb-4">Terms and Conditions</h1>
          <p className="text-lg text-gray-600">
            Please read these terms carefully before using SeeYou
          </p>
          <p className="text-sm text-gray-500 mt-2">Last updated: January 2024</p>
        </div>

        <div className="prose max-w-none space-y-8">
          <section>
            <h2 className="text-2xl font-semibold text-gray-800 mb-4">1. Acceptance of Terms</h2>
            <p className="text-gray-600">
              By accessing and using SeeYou, you accept and agree to be bound by the terms and provision of this agreement. 
              If you do not agree to abide by the above, please do not use this service.
            </p>
          </section>

          <section>
            <h2 className="text-2xl font-semibold text-gray-800 mb-4">2. Eligibility</h2>
            <div className="space-y-3">
              <p className="text-gray-600">To use SeeYou, you must:</p>
              <ul className="list-disc pl-6 space-y-2 text-gray-600">
                <li>Be at least 18 years old</li>
                <li>Have the legal capacity to enter into binding agreements</li>
                <li>Not be prohibited from using our service under applicable law</li>
                <li>Provide accurate and truthful information</li>
                <li>Maintain the security of your account credentials</li>
              </ul>
            </div>
          </section>

          <section>
            <h2 className="text-2xl font-semibold text-gray-800 mb-4">3. User Conduct</h2>
            <div className="bg-red-50 border border-red-200 rounded-lg p-6 mb-4">
              <h3 className="font-semibold text-red-800 mb-3">Prohibited Activities</h3>
              <ul className="list-disc pl-6 space-y-2 text-red-700">
                <li>Harassment, abuse, or threatening behavior</li>
                <li>Sharing inappropriate or offensive content</li>
                <li>Misrepresenting your identity or age</li>
                <li>Commercial solicitation or spam</li>
                <li>Sharing personal contact information publicly</li>
                <li>Creating fake or duplicate accounts</li>
              </ul>
            </div>
            <p className="text-gray-600">
              Users who violate these terms may have their accounts suspended or terminated at our discretion.
            </p>
          </section>

          <section>
            <h2 className="text-2xl font-semibold text-gray-800 mb-4">4. Premium Subscriptions</h2>
            <div className="grid md:grid-cols-2 gap-6">
              <div className="bg-pink-50 p-6 rounded-lg">
                <h3 className="font-semibold text-gray-800 mb-3">Subscription Terms</h3>
                <ul className="space-y-2 text-gray-600">
                  <li>• Monthly and annual plans available</li>
                  <li>• Automatic renewal unless cancelled</li>
                  <li>• Cancel anytime in account settings</li>
                  <li>• No refunds for partial months</li>
                </ul>
              </div>
              <div className="bg-purple-50 p-6 rounded-lg">
                <h3 className="font-semibold text-gray-800 mb-3">Premium Features</h3>
                <ul className="space-y-2 text-gray-600">
                  <li>• Unlimited likes and super likes</li>
                  <li>• See who liked you</li>
                  <li>• Advanced matching filters</li>
                  <li>• Priority customer support</li>
                </ul>
              </div>
            </div>
          </section>

          <section>
            <h2 className="text-2xl font-semibold text-gray-800 mb-4">5. Privacy and Data</h2>
            <p className="text-gray-600 mb-4">
              Your privacy is important to us. We collect and use your information as described in our Privacy Policy. 
              By using SeeYou, you consent to the collection and use of your information as outlined in our Privacy Policy.
            </p>
            <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
              <p className="text-blue-800">
                <strong>Important:</strong> Never share personal information like your full name, address, phone number, 
                or financial information with other users until you feel completely comfortable and safe.
              </p>
            </div>
          </section>

          <section>
            <h2 className="text-2xl font-semibold text-gray-800 mb-4">6. Content and Intellectual Property</h2>
            <p className="text-gray-600 mb-4">
              You retain ownership of content you post on SeeYou, but grant us a license to use, display, and distribute 
              your content within our service. You are responsible for ensuring you have the right to share any content you upload.
            </p>
          </section>

          <section>
            <h2 className="text-2xl font-semibold text-gray-800 mb-4">7. Safety and Security</h2>
            <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-6">
              <h3 className="font-semibold text-yellow-800 mb-3">Safety Guidelines</h3>
              <ul className="list-disc pl-6 space-y-2 text-yellow-700">
                <li>Meet in public places for first dates</li>
                <li>Tell friends or family about your plans</li>
                <li>Trust your instincts and report suspicious behavior</li>
                <li>Never send money or provide financial information</li>
                <li>Use SeeYou&apos;s in-app messaging until you feel safe</li>
              </ul>
            </div>
          </section>

          <section>
            <h2 className="text-2xl font-semibold text-gray-800 mb-4">8. Disclaimers and Limitations</h2>
            <p className="text-gray-600 mb-4">
              SeeYou is provided &ldquo;as is&rdquo; without any warranties. We do not guarantee matches, relationships, or outcomes. 
              We are not responsible for the actions of other users or any interactions that occur outside our platform.
            </p>
          </section>

          <section>
            <h2 className="text-2xl font-semibold text-gray-800 mb-4">9. Termination</h2>
            <p className="text-gray-600">
              Either party may terminate this agreement at any time. Upon termination, your right to use SeeYou will cease immediately. 
              We reserve the right to terminate accounts that violate these terms.
            </p>
          </section>

          <section>
            <h2 className="text-2xl font-semibold text-gray-800 mb-4">10. Contact Information</h2>
            <p className="text-gray-600">
              If you have questions about these Terms and Conditions, please contact us at 
              <a href="mailto:legal@seeyou.com" className="text-pink-600 hover:underline ml-1">legal@seeyou.com</a>.
            </p>
          </section>
        </div>
      </div>
    </div>
  );
}

================
File: src/app/globals.css
================
@import "tailwindcss";

:root {
	--background: #ffffff;
	--foreground: #171717;
}

@theme inline {
	--color-background: var(--background);
	--color-foreground: var(--foreground);
	--font-sans: var(--font-geist-sans);
	--font-mono: var(--font-geist-mono);
}

@media (prefers-color-scheme: dark) {
	:root {
		--background: #0a0a0a;
		--foreground: #ededed;
	}
}

body {
	background: var(--background);
	color: var(--foreground);
	font-family: Arial, Helvetica, sans-serif;
}

@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
	s:root {
		--violet-dark: #0a0015;
		--violet-medium: #1a0b2e;
		--violet-light: #2d1b4e;
		--violet-accent: #6b46c1;
		--violet-bright: #8b5cf6;
		--glass-bg: rgba(139, 92, 246, 0.1);
		--glass-border: rgba(139, 92, 246, 0.2);
	}

	body {
		@apply bg-gradient-to-br from-violet-950 via-purple-900 to-black text-white min-h-screen;
		background-attachment: fixed;
	}

	* {
		box-sizing: border-box;
	}

	/* Custom scrollbar */
	::-webkit-scrollbar {
		width: 8px;
	}

	::-webkit-scrollbar-track {
		background: rgba(139, 92, 246, 0.1);
	}

	::-webkit-scrollbar-thumb {
		background: linear-gradient(45deg, #6b46c1, #8b5cf6);
		border-radius: 4px;
	}

	::-webkit-scrollbar-thumb:hover {
		background: linear-gradient(45deg, #8b5cf6, #a855f7);
	}
}

@layer utilities {
	.bg-dark-primary {
		background-color: var(--bg-primary);
	}

	.bg-dark-secondary {
		background-color: var(--bg-secondary);
	}

	.bg-dark-accent {
		background-color: var(--bg-accent);
	}

	.text-dark-primary {
		color: var(--text-primary);
	}

	.text-dark-secondary {
		color: var(--text-secondary);
	}

	.text-dark-muted {
		color: var(--text-muted);
	}

	.btn-purple {
		@apply bg-purple-600 hover:bg-purple-700 text-white px-4 py-2 rounded-lg font-medium transition-all duration-300 transform hover:scale-105;
	}

	.btn-purple-outline {
		@apply border-2 border-purple-600 text-purple-400 hover:bg-purple-600 hover:text-white px-4 py-2 rounded-lg font-medium transition-all duration-300;
	}

	.card-dark {
		@apply bg-gray-800 border border-gray-700 rounded-lg shadow-xl hover:shadow-2xl transition-all duration-300;
	}

	.glass-effect {
		background: rgba(139, 92, 246, 0.1);
		backdrop-filter: blur(20px);
		border: 1px solid rgba(139, 92, 246, 0.2);
		box-shadow: 0 8px 32px rgba(139, 92, 246, 0.1);
	}

	.glass-card {
		background: rgba(30, 13, 53, 0.7);
		backdrop-filter: blur(20px);
		border: 1px solid rgba(139, 92, 246, 0.3);
		box-shadow: 0 8px 32px rgba(139, 92, 246, 0.2);
	}

	.glass-button {
		background: linear-gradient(
			135deg,
			rgba(139, 92, 246, 0.3),
			rgba(107, 70, 193, 0.3)
		);
		backdrop-filter: blur(10px);
		border: 1px solid rgba(139, 92, 246, 0.4);
		box-shadow: 0 4px 16px rgba(139, 92, 246, 0.3);
		transition: all 0.3s ease;
	}

	.glass-button:hover {
		background: linear-gradient(
			135deg,
			rgba(139, 92, 246, 0.5),
			rgba(107, 70, 193, 0.5)
		);
		box-shadow: 0 6px 24px rgba(139, 92, 246, 0.5);
		transform: translateY(-2px);
	}

	.neon-text {
		text-shadow: 0 0 5px #8b5cf6, 0 0 10px #8b5cf6, 0 0 15px #8b5cf6,
			0 0 20px #8b5cf6;
	}

	.neon-border {
		box-shadow: 0 0 10px #8b5cf6, 0 0 20px #8b5cf6, 0 0 30px #8b5cf6;
	}

	.gradient-text {
		background: linear-gradient(135deg, #8b5cf6, #ec4899, #06b6d4);
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;
		background-clip: text;
	}

	.futuristic-grid {
		background-image: linear-gradient(
				rgba(139, 92, 246, 0.1) 1px,
				transparent 1px
			),
			linear-gradient(90deg, rgba(139, 92, 246, 0.1) 1px, transparent 1px);
		background-size: 20px 20px;
	}

	.pulse-violet {
		animation: pulse-violet 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
	}

	@keyframes pulse-violet {
		0%,
		100% {
			box-shadow: 0 0 0 0 rgba(139, 92, 246, 0.7);
		}
		50% {
			box-shadow: 0 0 0 10px rgba(139, 92, 246, 0);
		}
	}

	.floating {
		animation: floating 3s ease-in-out infinite;
	}

	@keyframes floating {
		0%,
		100% {
			transform: translateY(0px);
		}
		50% {
			transform: translateY(-10px);
		}
	}

	.glow-effect {
		filter: drop-shadow(0 0 10px rgba(139, 92, 246, 0.7));
	}
}

================
File: src/lib/mongodb.ts
================
import { MongoClient } from "mongodb";

if (!process.env.MONGODB_URI) {
	throw new Error('Invalid/Missing environment variable: "MONGODB_URI"');
}

const uri = process.env.MONGODB_URI;
const options = {};

let client;
let clientPromise: Promise<MongoClient>;

if (process.env.NODE_ENV === "development") {
	const globalWithMongo = global as typeof globalThis & {
		_mongoClientPromise?: Promise<MongoClient>;
	};

	if (!globalWithMongo._mongoClientPromise) {
		client = new MongoClient(uri, options);
		globalWithMongo._mongoClientPromise = client.connect();
	}
	clientPromise = globalWithMongo._mongoClientPromise;
} else {
	client = new MongoClient(uri, options);
	clientPromise = client.connect();
}

export default clientPromise;

================
File: next.config.js
================
/** @type {import('next').NextConfig} */
const nextConfig = {
	images: {
		domains: ["res.cloudinary.com"],
	},
	// Remove CSP for development - uncomment for production
	// async headers() {
	//   return [
	//     {
	//       source: '/(.*)',
	//       headers: [
	//         {
	//           key: 'Content-Security-Policy',
	//           value: "script-src 'self' 'unsafe-eval' 'unsafe-inline' https://widget.cloudinary.com https://cdnjs.cloudflare.com https://*.clerk.accounts.dev https://*.clerk.dev https://clerk.com https://js.clerk.dev; object-src 'none'; connect-src 'self' https://*.clerk.accounts.dev https://*.clerk.dev https://clerk.com https://api.clerk.dev;"
	//         }
	//       ]
	//     }
	//   ]
	// }
};

module.exports = nextConfig;

================
File: package.json
================
{
  "name": "seeyou",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@clerk/nextjs": "^6.25.3",
    "cloudinary": "^2.7.0",
    "mongodb": "^6.17.0",
    "mongoose": "^8.16.3",
    "multer": "^2.0.1",
    "next": "15.4.1",
    "next-cloudinary": "^6.16.0",
    "razorpay": "^2.9.6",
    "react": "19.1.0",
    "react-dom": "19.1.0",
    "repomix": "^1.2.1"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@tailwindcss/postcss": "^4",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.4.1",
    "tailwindcss": "^4",
    "typescript": "^5"
  }
}

================
File: vercel.json
================
{
  "buildCommand": "npm run build",
  "outputDirectory": ".next",
  "framework": "nextjs",
  "installCommand": "npm install",
  "functions": {
    "app/api/**/*.ts": {
      "maxDuration": 30
    }
  },
  "env": {
    "NODE_ENV": "production"
  },
  "regions": ["cle1"]
}

================
File: src/app/cancellation-refund/page.tsx
================
import React from 'react';

export default function CancellationRefund() {
  return (
    <div className="min-h-screen bg-gradient-to-br from-pink-50 to-purple-50 py-12 px-4">
      <div className="max-w-4xl mx-auto bg-white rounded-lg shadow-lg p-8">
        <div className="text-center mb-12">
          <h1 className="text-4xl font-bold text-gray-800 mb-4">Cancellation & Refund Policy</h1>
          <p className="text-lg text-gray-600">
            Understanding your subscription and refund options
          </p>
        </div>

        <div className="prose max-w-none space-y-8">
          <section>
            <h2 className="text-2xl font-semibold text-gray-800 mb-4">Subscription Cancellation</h2>
            <div className="bg-green-50 border border-green-200 rounded-lg p-6 mb-6">
              <h3 className="font-semibold text-green-800 mb-3">How to Cancel Your Subscription</h3>
              <ol className="list-decimal pl-6 space-y-2 text-green-700">
                <li>Log into your SeeYou account</li>
                <li>Go to Account Settings</li>
                <li>Select &ldquo;Subscription Management&rdquo;</li>
                <li>Click &ldquo;Cancel Subscription&rdquo;</li>
                <li>Follow the confirmation prompts</li>
              </ol>
            </div>
            <p className="text-gray-600">
              You can cancel your subscription at any time. Your premium features will remain active until the end of your current billing period.
            </p>
          </section>

          <section>
            <h2 className="text-2xl font-semibold text-gray-800 mb-4">Refund Policy</h2>
            
            <div className="grid md:grid-cols-2 gap-6 mb-6">
              <div className="bg-blue-50 p-6 rounded-lg">
                <h3 className="font-semibold text-blue-800 mb-3">Eligible for Refund</h3>
                <ul className="space-y-2 text-blue-700">
                  <li>✓ Technical issues preventing service use</li>
                  <li>✓ Accidental double charges</li>
                  <li>✓ Unauthorized charges</li>
                  <li>✓ Service not as described</li>
                </ul>
              </div>
              
              <div className="bg-red-50 p-6 rounded-lg">
                <h3 className="font-semibold text-red-800 mb-3">Not Eligible for Refund</h3>
                <ul className="space-y-2 text-red-700">
                  <li>✗ Change of mind</li>
                  <li>✗ Partial month usage</li>
                  <li>✗ Account suspension for violations</li>
                  <li>✗ Not finding matches</li>
                </ul>
              </div>
            </div>
          </section>

          <section>
            <h2 className="text-2xl font-semibold text-gray-800 mb-4">Refund Timeline</h2>
            <div className="bg-gray-50 p-6 rounded-lg">
              <div className="space-y-4">
                <div className="flex items-center space-x-4">
                  <div className="bg-pink-500 text-white rounded-full w-8 h-8 flex items-center justify-center font-bold">1</div>
                  <div>
                    <h4 className="font-semibold text-gray-800">Request Submitted</h4>
                    <p className="text-gray-600">We&apos;ll acknowledge your refund request within 24 hours</p>
                  </div>
                </div>
                <div className="flex items-center space-x-4">
                  <div className="bg-purple-500 text-white rounded-full w-8 h-8 flex items-center justify-center font-bold">2</div>
                  <div>
                    <h4 className="font-semibold text-gray-800">Review Process</h4>
                    <p className="text-gray-600">Our team reviews your request within 3-5 business days</p>
                  </div>
                </div>
                <div className="flex items-center space-x-4">
                  <div className="bg-blue-500 text-white rounded-full w-8 h-8 flex items-center justify-center font-bold">3</div>
                  <div>
                    <h4 className="font-semibold text-gray-800">Refund Processing</h4>
                    <p className="text-gray-600">If approved, refunds are processed within 7-10 business days</p>
                  </div>
                </div>
              </div>
            </div>
          </section>

          <section>
            <h2 className="text-2xl font-semibold text-gray-800 mb-4">Premium Features & Gifts</h2>
            
            <div className="space-y-6">
              <div className="border-l-4 border-pink-500 pl-6">
                <h3 className="font-semibold text-gray-800 mb-2">Virtual Gifts</h3>
                <p className="text-gray-600">
                  Virtual gifts sent to other users are non-refundable once delivered. Physical gifts may be eligible 
                  for refund if not yet shipped.
                </p>
              </div>
              
              <div className="border-l-4 border-purple-500 pl-6">
                <h3 className="font-semibold text-gray-800 mb-2">Boost Features</h3>
                <p className="text-gray-600">
                  Profile boosts and super likes that have been used cannot be refunded. Unused boosts may be 
                  eligible for refund in certain circumstances.
                </p>
              </div>
              
              <div className="border-l-4 border-blue-500 pl-6">
                <h3 className="font-semibold text-gray-800 mb-2">Premium Subscriptions</h3>
                <p className="text-gray-600">
                  Subscription refunds are only provided for the current billing period and only under specific circumstances 
                  outlined in our refund policy.
                </p>
              </div>
            </div>
          </section>

          <section>
            <h2 className="text-2xl font-semibold text-gray-800 mb-4">How to Request a Refund</h2>
            <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-6">
              <h3 className="font-semibold text-yellow-800 mb-3">Refund Request Process</h3>
              <div className="space-y-3 text-yellow-700">
                <p>1. Email us at <strong>refunds@seeyou.com</strong> with the following information:</p>
                <ul className="list-disc pl-6 space-y-1">
                  <li>Your account email address</li>
                  <li>Order/Transaction ID</li>
                  <li>Reason for refund request</li>
                  <li>Supporting documentation (if applicable)</li>
                </ul>
                <p>2. Our team will review your request and respond within 3-5 business days</p>
                <p>3. If approved, the refund will be processed to your original payment method</p>
              </div>
            </div>
          </section>

          <section>
            <h2 className="text-2xl font-semibold text-gray-800 mb-4">Free Trial Cancellation</h2>
            <p className="text-gray-600 mb-4">
              If you&apos;re on a free trial, you can cancel anytime during the trial period without being charged. 
              Make sure to cancel at least 24 hours before the trial ends to avoid automatic billing.
            </p>
            <div className="bg-green-50 border border-green-200 rounded-lg p-4">
              <p className="text-green-800">
                <strong>Tip:</strong> Set a reminder to cancel your trial if you don&apos;t want to continue with a paid subscription.
              </p>
            </div>
          </section>

          <section>
            <h2 className="text-2xl font-semibold text-gray-800 mb-4">Contact Support</h2>
            <p className="text-gray-600">
              If you have questions about cancellations or refunds, please contact our support team:
            </p>
            <div className="mt-4 space-y-2">
              <p className="text-gray-600">📧 Email: <a href="mailto:support@seeyou.com" className="text-pink-600 hover:underline">support@seeyou.com</a></p>
              <p className="text-gray-600">📞 Phone: +1 (555) 123-LOVE</p>
              <p className="text-gray-600">💬 Live Chat: Available 24/7 on our website</p>
            </div>
          </section>
        </div>
      </div>
    </div>
  );
}

================
File: src/app/matches/page.tsx
================
"use client";

import { useState, useEffect, useCallback } from "react";
import { useUser, UserButton } from "@clerk/nextjs";
import { UserProfile } from "@/models/User";
import Image from "next/image";
import Script from "next/script";

export default function MatchesPage() {
	const { user } = useUser();
	const [matches, setMatches] = useState<UserProfile[]>([]);
	const [loading, setLoading] = useState(true);
	const [error, setError] = useState<string | null>(null);
	const [revealedMatches, setRevealedMatches] = useState<string[]>([]);
	const [paymentLoading, setPaymentLoading] = useState<string | null>(null);
	const [razorpayLoaded, setRazorpayLoaded] = useState(false);

	const fetchMatches = useCallback(async () => {
		if (!user?.id) return;

		try {
			setLoading(true);
			const response = await fetch(
				`/api/matches?currentUserId=${user.id}`
			);

			if (!response.ok) {
				throw new Error("Failed to fetch matches");
			}

			const data = await response.json();
			setMatches(data.matches);
		} catch (err) {
			console.error("Error fetching matches:", err);
			setError("Failed to load matches. Please try again.");
		} finally {
			setLoading(false);
		}
	}, [user?.id]);

	useEffect(() => {
		if (user?.id) {
			fetchMatches();
		}
	}, [user?.id, fetchMatches]);

	// File: src/app/matches/page.tsx

	// ... (imports and component setup remain the same)

	const handlePayment = async (matchId: string, matchName: string) => {
		if (!user?.id) {
			alert("User not authenticated");
			return;
		}

		if (!razorpayLoaded) {
			alert("Payment system is loading. Please try again in a moment.");
			return;
		}

		setPaymentLoading(matchId);

		try {
			// Create order
			const orderResponse = await fetch("/api/payment/create-order", {
				method: "POST",
				headers: { "Content-Type": "application/json" },
				body: JSON.stringify({
					amount: 29,
					currency: "INR",
					matchId: matchId,
				}),
			});

			// If the server response is not OK, parse the JSON to see the detailed error
			if (!orderResponse.ok) {
				const errorData = await orderResponse.json();
				console.error("Server responded with an error:", errorData);
				throw new Error(
					errorData.error ||
						`HTTP ${orderResponse.status}: Failed to create payment order`
				);
			}

			const orderData = await orderResponse.json();

			if (!orderData.orderId) {
				throw new Error("Order ID not received from server");
			}

			if (typeof window === "undefined" || !(window as any).Razorpay) {
				throw new Error(
					"Payment system not loaded. Please refresh the page."
				);
			}

			const options = {
				key: orderData.key,
				amount: orderData.amount,
				currency: orderData.currency,
				name: "SeeYou",
				description: `Reveal match with ${matchName}`,
				order_id: orderData.orderId,
				handler: async function (response: any) {
					try {
						const verifyResponse = await fetch(
							"/api/payment/verify",
							{
								method: "POST",
								headers: { "Content-Type": "application/json" },
								body: JSON.stringify({
									orderId: response.razorpay_order_id,
									paymentId: response.razorpay_payment_id,
									signature: response.razorpay_signature,
									userId: user.id,
									matchId: matchId,
								}),
							}
						);

						const verifyData = await verifyResponse.json();

						if (verifyResponse.ok && verifyData.success) {
							setRevealedMatches((prev) => [...prev, matchId]);
							alert("Payment successful! Match revealed!");
						} else {
							throw new Error(
								verifyData.error ||
									"Payment verification failed"
							);
						}
					} catch (error) {
						console.error("Payment verification error:", error);
						alert(
							"Payment verification failed. Please contact support."
						);
					} finally {
						setPaymentLoading(null);
					}
				},
				prefill: {
					name: user.fullName || "User",
					email: user.emailAddresses[0]?.emailAddress || "",
				},
				theme: {
					color: "#8b5cf6",
				},
				modal: {
					ondismiss: function () {
						setPaymentLoading(null);
					},
				},
			};

			const razorpay = new (window as any).Razorpay(options);
			razorpay.open();
		} catch (error) {
			console.error("Payment error in handlePayment:", error);
			alert(
				`Payment failed: ${
					error instanceof Error
						? error.message
						: "An unknown error occurred. Check the console."
				}`
			);
			setPaymentLoading(null);
		}
	};

	// ... (rest of the component remains the same)

	if (loading) {
		return (
			<div className="min-h-screen bg-gradient-to-br from-rose-50 via-pink-50 to-purple-100 flex items-center justify-center">
				<div className="text-center glass-card p-8 rounded-3xl">
					<div className="animate-spin rounded-full h-16 w-16 border-t-4 border-pink-500 mx-auto mb-6"></div>
					<p className="text-pink-600 text-lg font-medium">
						Finding your matches...
					</p>
				</div>
			</div>
		);
	}

	if (error) {
		return (
			<div className="min-h-screen bg-gradient-to-br from-rose-50 via-pink-50 to-purple-100 flex items-center justify-center">
				<div className="text-center glass-card p-8 rounded-3xl">
					<p className="text-red-500 mb-6 font-medium">{error}</p>
					<button
						onClick={fetchMatches}
						className="bg-gradient-to-r from-pink-500 to-rose-500 hover:from-pink-600 hover:to-rose-600 text-white px-6 py-3 rounded-2xl font-semibold transition-all duration-300 transform hover:scale-105"
					>
						Try Again
					</button>
				</div>
			</div>
		);
	}

	return (
		<>
			<Script
				src="https://checkout.razorpay.com/v1/checkout.js"
				onLoad={() => setRazorpayLoaded(true)}
				onError={() => {
					console.error("Failed to load Razorpay script");
					setRazorpayLoaded(false);
				}}
			/>
			<div className="min-h-screen bg-gradient-to-br from-rose-50 via-pink-50 to-purple-100 flex flex-col">
				{/* Header */}
				<div className="glass-effect border-b border-pink-200/50 backdrop-blur-md">
					<div className="max-w-7xl mx-auto px-6 lg:px-8 py-8 flex flex-col md:flex-row justify-between items-center gap-6">
						<div className="text-center md:text-left">
							<h1 className="text-4xl md:text-5xl font-bold bg-gradient-to-r from-pink-600 via-rose-500 to-purple-600 bg-clip-text text-transparent mb-2">
								💕 Your Matches
							</h1>
							<p className="text-pink-600/70 text-lg font-light">
								{matches.length}{" "}
								{matches.length === 1 ? "soul" : "souls"}{" "}
								connected with yours
							</p>
						</div>
						<div className="flex items-center gap-4">
							<a href="/people">
								<button className="glass-button bg-white/30 backdrop-blur-sm border border-pink-200/50 text-pink-700 hover:bg-pink-50/50 px-6 py-3 rounded-2xl font-semibold transition-all duration-300 transform hover:scale-105">
									← Back to People
								</button>
							</a>
							<UserButton afterSignOutUrl="/" />
						</div>
					</div>
				</div>

				{/* Content */}
				<div className="max-w-7xl mx-auto px-6 lg:px-8 py-12 flex-1">
					{matches.length === 0 ? (
						<div className="text-center py-20">
							<div className="w-32 h-32 glass-card rounded-full mx-auto mb-8 flex items-center justify-center bg-gradient-to-br from-pink-100 to-rose-100 border border-pink-200/50">
								<span className="text-6xl">💔</span>
							</div>
							<h3 className="text-3xl font-bold bg-gradient-to-r from-pink-600 to-rose-600 bg-clip-text text-transparent mb-4">
								No matches yet
							</h3>
							<p className="text-pink-600/70 mb-8 max-w-md mx-auto text-lg leading-relaxed">
								Your perfect match is waiting to be discovered.
								Keep spreading the love!
							</p>
							<a href="/people">
								<button className="bg-gradient-to-r from-pink-500 via-rose-500 to-purple-500 hover:from-pink-600 hover:via-rose-600 hover:to-purple-600 text-white px-8 py-4 rounded-2xl font-semibold text-lg transition-all duration-300 transform hover:scale-105 shadow-lg">
									Find Your Match ✨
								</button>
							</a>
						</div>
					) : (
						<div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
							{matches.map((match, index) => {
								const isFirstMatch = index === 0;
								const isRevealed =
									isFirstMatch ||
									revealedMatches.includes(match.clerkId);
								const isPaymentLoading =
									paymentLoading === match.clerkId;

								return (
									<div
										key={match.clerkId}
										className="glass-card bg-white/40 backdrop-blur-md border border-pink-200/50 rounded-3xl p-8 text-center hover:scale-105 transition-all duration-500 hover:shadow-xl group relative"
									>
										{/* Payment Overlay for locked matches */}
										{!isRevealed && (
											<div className="absolute inset-0 bg-gradient-to-br from-pink-500/80 to-purple-600/80 backdrop-blur-sm rounded-3xl flex flex-col items-center justify-center z-10">
												<div className="text-center p-6">
													<div className="w-16 h-16 bg-white/20 rounded-full flex items-center justify-center mx-auto mb-4 backdrop-blur-sm">
														<svg
															className="w-8 h-8 text-white"
															fill="none"
															stroke="currentColor"
															viewBox="0 0 24 24"
														>
															<path
																strokeLinecap="round"
																strokeLinejoin="round"
																strokeWidth={2}
																d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"
															/>
														</svg>
													</div>
													<h3 className="text-xl font-bold text-white mb-2">
														Reveal This Match
													</h3>
													<p className="text-white/90 mb-4 text-sm">
														Pay ₹29 to see contact
														details
													</p>
													<button
														onClick={() =>
															handlePayment(
																match.clerkId,
																match.name
															)
														}
														disabled={
															isPaymentLoading ||
															!razorpayLoaded
														}
														className="bg-white/20 hover:bg-white/30 backdrop-blur-sm text-white px-6 py-3 rounded-2xl font-semibold transition-all duration-300 transform hover:scale-105 disabled:opacity-50 border border-white/30"
													>
														{isPaymentLoading ? (
															<>
																<div className="inline-block animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
																Processing...
															</>
														) : !razorpayLoaded ? (
															"Loading..."
														) : (
															<>
																💳 Pay ₹29 to
																Reveal
															</>
														)}
													</button>
												</div>
											</div>
										)}

										{/* Match Content - Always rendered but blurred when locked */}
										<div
											className={
												!isRevealed ? "blur-sm" : ""
											}
										>
											{/* Match Header */}
											<div className="relative mb-6">
												<div className="absolute -top-2 -right-2 bg-gradient-to-r from-pink-500 to-rose-500 text-white text-xs font-bold px-3 py-1 rounded-full animate-pulse">
													Match! 💕
												</div>

												{/* Profile Photo */}
												{match.photoUrl ? (
													<Image
														src={match.photoUrl}
														alt={`${match.name}&apos;s profile`}
														width={96}
														height={96}
														className="w-24 h-24 rounded-full mx-auto object-cover border-4 border-pink-300 group-hover:border-rose-300 transition-all duration-300"
													/>
												) : (
													<div className="w-24 h-24 rounded-full mx-auto bg-gradient-to-br from-pink-400 to-rose-500 flex items-center justify-center border-4 border-pink-300 group-hover:border-rose-300 transition-all duration-300">
														<span className="text-white font-bold text-2xl">
															{match.name
																.charAt(0)
																.toUpperCase()}
															{match.lastName
																? match.lastName
																		.charAt(
																			0
																		)
																		.toUpperCase()
																: ""}
														</span>
													</div>
												)}
											</div>

											{/* Name */}
											<h3 className="text-2xl font-bold text-gray-800 mb-6">
												{match.name} {match.lastName}
											</h3>

											{/* Contact Information */}
											<div className="space-y-4 mb-8">
												{match.phone && (
													<div className="flex items-center justify-center gap-3 text-pink-700">
														<div className="w-10 h-10 bg-pink-100 rounded-full flex items-center justify-center">
															<svg
																className="w-5 h-5"
																fill="none"
																stroke="currentColor"
																viewBox="0 0 24 24"
															>
																<path
																	strokeLinecap="round"
																	strokeLinejoin="round"
																	strokeWidth={
																		2
																	}
																	d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"
																/>
															</svg>
														</div>
														<span className="font-medium">
															{match.phone}
														</span>
													</div>
												)}

												{match.instagramId && (
													<div className="flex items-center justify-center gap-3 text-pink-700">
														<div className="w-10 h-10 bg-pink-100 rounded-full flex items-center justify-center">
															<svg
																className="w-5 h-5"
																fill="currentColor"
																viewBox="0 0 24 24"
															>
																<path d="M12 2.163c3.204 0 3.584.012 4.85.07 3.252.148 4.771 1.691 4.919 4.919.058 1.265.069 1.645.069 4.849 0 3.205-.012 3.584-.069 4.849-.149 3.225-1.664 4.771-4.919 4.919-1.266.058-1.644.07-4.85.07-3.204 0-3.584-.012-4.849-.07-3.26-.149-4.771-1.699-4.919-4.92-.058-1.265-.07-1.644-.07-4.849 0-3.204.013-3.583.07-4.849.149-3.227 1.664-4.771 4.919-4.919 1.266-.057 1.645-.069 4.849-.069zm0-2.163c-3.259 0-3.667.014-4.947.072-4.358.2-6.78 2.618-6.98 6.98-.059 1.281-.073 1.689-.073 4.948 0 3.259.014 3.668.072 4.948.2 4.358 2.618 6.78 6.98 6.98 1.281.058 1.689.072 4.948.072 3.259 0 3.668-.014 4.948-.072 4.354-.2 6.782-2.618 6.979-6.98.059-1.28.073-1.689.073-4.948 0-3.259-.014-3.667-.072-4.947-.196-4.354-2.617-6.78-6.979-6.98-1.281-.059-1.69-.073-4.949-.073zm0 5.838c-3.403 0-6.162 2.759-6.162 6.162s2.759 6.163 6.162 6.163 6.162-2.759 6.162-6.163c0-3.403-2.759-6.162-6.162-6.162zm0 10.162c-2.209 0-4-1.79-4-4 0-2.209 1.791-4 4-4s4 1.791 4 4c0 2.21-1.791 4-4 4zm6.406-11.845c-.796 0-1.441.645-1.441 1.44s.645 1.44 1.441 1.44c.795 0 1.439-.645 1.439-1.44s-.644-1.44-1.439-1.44z" />
															</svg>
														</div>
														<span className="font-medium">
															{match.instagramId}
														</span>
													</div>
												)}
											</div>

											{/* Action Buttons */}
											<div className="flex gap-3">
												{match.phone && (
													<a
														href={`tel:${match.phone}`}
														className="flex-1 bg-gradient-to-r from-green-400 to-emerald-500 hover:from-green-500 hover:to-emerald-600 text-white py-3 px-4 rounded-2xl font-semibold text-center transition-all duration-300 transform hover:scale-105"
													>
														📞 Call
													</a>
												)}
												{match.instagramId && (
													<a
														href={`https://instagram.com/${match.instagramId.replace(
															"@",
															""
														)}`}
														target="_blank"
														rel="noopener noreferrer"
														className="flex-1 bg-gradient-to-r from-purple-400 to-pink-500 hover:from-purple-500 hover:to-pink-600 text-white py-3 px-4 rounded-2xl font-semibold text-center transition-all duration-300 transform hover:scale-105"
													>
														📷 Instagram
													</a>
												)}
											</div>
										</div>

										{/* Free badge for first match */}
										{isFirstMatch && (
											<div className="absolute top-4 left-4 bg-gradient-to-r from-green-500 to-emerald-600 text-white text-xs font-bold px-3 py-1 rounded-full">
												FREE ✨
											</div>
										)}
									</div>
								);
							})}
						</div>
					)}
				</div>

				{/* Footer */}
				<div className="glass-effect border-t border-pink-200/50 backdrop-blur-md py-8 mt-auto">
					<div className="max-w-7xl mx-auto px-6 lg:px-8">
						<div className="text-center">
							<h3 className="text-2xl font-bold bg-gradient-to-r from-pink-600 to-rose-600 bg-clip-text text-transparent mb-2">
								SeeYou
							</h3>
							<p className="text-pink-600/70 font-light">
								Where hearts connect and love stories begin ✨
							</p>
						</div>
					</div>
				</div>
			</div>
		</>
	);
}

================
File: src/app/shipping-policy/page.tsx
================
import React from 'react';

export default function ShippingPolicy() {
  return (
    <div className="min-h-screen bg-gradient-to-br from-pink-50 to-purple-50 py-12 px-4">
      <div className="max-w-4xl mx-auto bg-white rounded-lg shadow-lg p-8">
        <div className="text-center mb-12">
          <h1 className="text-4xl font-bold text-gray-800 mb-4">Shipping Policy</h1>
          <p className="text-lg text-gray-600">
            Information about our premium gift and merchandise delivery
          </p>
        </div>

        <div className="prose max-w-none">
          <section className="mb-8">
            <h2 className="text-2xl font-semibold text-gray-800 mb-4">Premium Gifts & Merchandise</h2>
            <p className="text-gray-600 mb-4">
              SeeYou offers premium gifts and branded merchandise that can be sent to your matches or purchased for yourself. 
              All physical items are subject to our shipping policy outlined below.
            </p>
          </section>

          <section className="mb-8">
            <h2 className="text-2xl font-semibold text-gray-800 mb-4">Shipping Zones & Delivery Times</h2>
            <div className="grid md:grid-cols-2 gap-6 mb-6">
              <div className="bg-pink-50 p-6 rounded-lg">
                <h3 className="font-semibold text-gray-800 mb-3">Domestic Shipping (US)</h3>
                <ul className="space-y-2 text-gray-600">
                  <li>• Standard: 3-5 business days</li>
                  <li>• Express: 1-2 business days</li>
                  <li>• Same Day (select cities): Within 4 hours</li>
                  <li>• Gift delivery with message card included</li>
                </ul>
              </div>
              <div className="bg-purple-50 p-6 rounded-lg">
                <h3 className="font-semibold text-gray-800 mb-3">International Shipping</h3>
                <ul className="space-y-2 text-gray-600">
                  <li>• Canada: 5-7 business days</li>
                  <li>• Europe: 7-10 business days</li>
                  <li>• Australia/Asia: 10-14 business days</li>
                  <li>• Customs duties may apply</li>
                </ul>
              </div>
            </div>
          </section>

          <section className="mb-8">
            <h2 className="text-2xl font-semibold text-gray-800 mb-4">Gift Delivery Options</h2>
            <div className="space-y-4">
              <div className="border-l-4 border-pink-500 pl-4">
                <h3 className="font-semibold text-gray-800">Anonymous Gift Delivery</h3>
                <p className="text-gray-600">Send gifts anonymously with only your first name and a custom message.</p>
              </div>
              <div className="border-l-4 border-purple-500 pl-4">
                <h3 className="font-semibold text-gray-800">Scheduled Delivery</h3>
                <p className="text-gray-600">Schedule gift delivery for special occasions or surprise dates.</p>
              </div>
              <div className="border-l-4 border-blue-500 pl-4">
                <h3 className="font-semibold text-gray-800">Premium Packaging</h3>
                <p className="text-gray-600">All gifts come in beautiful SeeYou branded packaging with romantic touches.</p>
              </div>
            </div>
          </section>

          <section className="mb-8">
            <h2 className="text-2xl font-semibold text-gray-800 mb-4">Shipping Costs</h2>
            <div className="bg-gray-50 p-6 rounded-lg">
              <div className="grid md:grid-cols-3 gap-4 text-center">
                <div>
                  <h4 className="font-semibold text-gray-800">Standard</h4>
                  <p className="text-2xl font-bold text-pink-600">$5.99</p>
                  <p className="text-gray-600">3-5 days</p>
                </div>
                <div>
                  <h4 className="font-semibold text-gray-800">Express</h4>
                  <p className="text-2xl font-bold text-purple-600">$12.99</p>
                  <p className="text-gray-600">1-2 days</p>
                </div>
                <div>
                  <h4 className="font-semibold text-gray-800">Same Day</h4>
                  <p className="text-2xl font-bold text-blue-600">$24.99</p>
                  <p className="text-gray-600">4 hours</p>
                </div>
              </div>
              <p className="text-center text-gray-600 mt-4">*Free shipping on orders over $50</p>
            </div>
          </section>

          <section className="mb-8">
            <h2 className="text-2xl font-semibold text-gray-800 mb-4">Order Processing</h2>
            <p className="text-gray-600 mb-4">
              Orders are processed Monday through Friday, 9 AM to 6 PM EST. Orders placed after 2 PM EST 
              will be processed the next business day. Weekend and holiday orders will be processed on the next business day.
            </p>
          </section>

          <section className="mb-8">
            <h2 className="text-2xl font-semibold text-gray-800 mb-4">Privacy & Discretion</h2>
            <p className="text-gray-600 mb-4">
              We understand the importance of privacy in dating. All packages are shipped in discreet packaging 
              without any external branding that indicates the nature of our service. Only the recipient&apos;s information 
              is visible on the package.
            </p>
          </section>

          <section>
            <h2 className="text-2xl font-semibold text-gray-800 mb-4">Contact Us</h2>
            <p className="text-gray-600">
              For questions about your order or shipping, please contact our support team at 
              <a href="mailto:shipping@seeyou.com" className="text-pink-600 hover:underline ml-1">shipping@seeyou.com</a> 
              or call us at +1 (555) 123-LOVE.
            </p>
          </section>
        </div>
      </div>
    </div>
  );
}

================
File: src/app/layout.tsx
================
import type { Metadata } from "next";
import { ClerkProvider } from "@clerk/nextjs";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import Footer from "@/components/Footer";

const geistSans = Geist({
	variable: "--font-geist-sans",
	subsets: ["latin"],
});

const geistMono = Geist_Mono({
	variable: "--font-geist-mono",
	subsets: ["latin"],
});

export const metadata: Metadata = {
	title: "SeeYou - Dating App",
	description: "Connect with amazing people",
};

export default function RootLayout({
	children,
}: Readonly<{
	children: React.ReactNode;
}>) {
	return (
		<ClerkProvider>
			<html lang="en">
				<body
					className={`${geistSans.variable} ${geistMono.variable} antialiased`}
				>
					{children}
					<Footer />
				</body>
			</html>
		</ClerkProvider>
	);
}

================
File: src/app/page.tsx
================
"use client";

import { SignInButton, SignUpButton, UserButton, useUser } from "@clerk/nextjs";
import { useRouter } from "next/navigation";
import { useEffect, useState, useCallback } from "react";

export default function Home() {
	const { isLoaded, isSignedIn, user } = useUser();
	const router = useRouter();
	const [checking, setChecking] = useState(false);
	const [hasChecked, setHasChecked] = useState(false);

	const checkUserInDatabase = useCallback(async () => {
		if (!user?.id || checking || hasChecked) return;

		try {
			setChecking(true);
			const response = await fetch(`/api/user-check?clerkId=${user.id}`);
			const data = await response.json();

			if (data.exists) {
				router.push("/people");
			} else {
				router.push("/complete-profile");
			}
		} catch (error) {
			console.error("Error checking user:", error);
		} finally {
			setChecking(false);
			setHasChecked(true);
		}
	}, [user?.id, router, checking, hasChecked]);

	useEffect(() => {
		if (isLoaded && isSignedIn && user?.id && !checking && !hasChecked) {
			checkUserInDatabase();
		}
	}, [
		isLoaded,
		isSignedIn,
		user?.id,
		checkUserInDatabase,
		checking,
		hasChecked,
	]);

	if (!isLoaded || checking) {
		return (
			<div className="min-h-screen bg-gradient-to-br from-violet-950 via-purple-900 to-black flex items-center justify-center">
				<div className="text-center">
					<div className="animate-spin rounded-full h-16 w-16 border-t-4 border-violet-400 mx-auto mb-6"></div>
					<p className="text-violet-300 text-lg font-medium">
						Loading...
					</p>
				</div>
			</div>
		);
	}

	return (
		<div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100">
			{/* Navigation */}
			<nav className="px-4 py-4 flex justify-between items-center">
				<div className="text-2xl font-bold text-gray-900">
					See<span className="text-blue-600">You</span>
				</div>
				<div className="flex items-center gap-4">
					{user ? (
						<UserButton afterSignOutUrl="/" />
					) : (
						<>
							<SignInButton mode="modal">
								<button className="text-gray-700 hover:text-gray-900 font-medium">
									Sign In
								</button>
							</SignInButton>
							<SignUpButton mode="modal">
								<button className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg font-medium transition-colors">
									Sign Up
								</button>
							</SignUpButton>
						</>
					)}
				</div>
			</nav>

			{/* Hero Section */}
			<section className="px-4 py-20 text-center">
				<div className="max-w-4xl mx-auto">
					<h1 className="text-5xl md:text-7xl font-bold text-gray-900 mb-6">
						See<span className="text-blue-600">You</span>
					</h1>
					<p className="text-xl md:text-2xl text-gray-600 mb-8 max-w-3xl mx-auto">
						Connect, meet, and stay in touch with the people who
						matter most to you.
					</p>
					<div className="flex flex-col sm:flex-row gap-4 justify-center">
						{user ? (
							<a href="/complete-profile">
								<button className="bg-blue-600 hover:bg-blue-700 text-white px-8 py-3 rounded-lg font-semibold transition-colors">
									Complete Your Profile
								</button>
							</a>
						) : (
							<>
								<SignUpButton mode="modal">
									<button className="bg-blue-600 hover:bg-blue-700 text-white px-8 py-3 rounded-lg font-semibold transition-colors">
										Get Started
									</button>
								</SignUpButton>
								<SignInButton mode="modal">
									<button className="border border-gray-300 hover:border-gray-400 text-gray-700 px-8 py-3 rounded-lg font-semibold transition-colors">
										Sign In
									</button>
								</SignInButton>
							</>
						)}
					</div>
				</div>
			</section>

			{/* Features Section */}
			<section className="px-4 py-16 bg-white">
				<div className="max-w-6xl mx-auto">
					<h2 className="text-3xl md:text-4xl font-bold text-center text-gray-900 mb-12">
						Why Choose SeeYou?
					</h2>
					<div className="grid md:grid-cols-3 gap-8">
						<div className="text-center p-6">
							<div className="w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4">
								<svg
									className="w-8 h-8 text-blue-600"
									fill="none"
									stroke="currentColor"
									viewBox="0 0 24 24"
								>
									<path
										strokeLinecap="round"
										strokeLinejoin="round"
										strokeWidth={2}
										d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"
									/>
								</svg>
							</div>
							<h3 className="text-xl font-semibold text-gray-900 mb-2">
								Easy Connections
							</h3>
							<p className="text-gray-600">
								Connect with friends, family, and colleagues
								effortlessly.
							</p>
						</div>
						<div className="text-center p-6">
							<div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
								<svg
									className="w-8 h-8 text-green-600"
									fill="none"
									stroke="currentColor"
									viewBox="0 0 24 24"
								>
									<path
										strokeLinecap="round"
										strokeLinejoin="round"
										strokeWidth={2}
										d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"
									/>
								</svg>
							</div>
							<h3 className="text-xl font-semibold text-gray-900 mb-2">
								Smart Scheduling
							</h3>
							<p className="text-gray-600">
								Plan meetings and events with intelligent
								scheduling features.
							</p>
						</div>
						<div className="text-center p-6">
							<div className="w-16 h-16 bg-purple-100 rounded-full flex items-center justify-center mx-auto mb-4">
								<svg
									className="w-8 h-8 text-purple-600"
									fill="none"
									stroke="currentColor"
									viewBox="0 0 24 24"
								>
									<path
										strokeLinecap="round"
										strokeLinejoin="round"
										strokeWidth={2}
										d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"
									/>
								</svg>
							</div>
							<h3 className="text-xl font-semibold text-gray-900 mb-2">
								Secure & Private
							</h3>
							<p className="text-gray-600">
								Your connections and data are protected with
								enterprise-grade security.
							</p>
						</div>
					</div>
				</div>
			</section>

			{/* Call to Action */}
			<section className="px-4 py-16 bg-blue-600">
				<div className="max-w-4xl mx-auto text-center">
					<h2 className="text-3xl md:text-4xl font-bold text-white mb-4">
						Ready to get started?
					</h2>
					<p className="text-blue-100 text-lg mb-8">
						Join thousands of users who are already connecting
						through SeeYou.
					</p>
					{user ? (
						<a href="/complete-profile">
							<button className="bg-white hover:bg-gray-100 text-blue-600 px-8 py-3 rounded-lg font-semibold transition-colors">
								Complete Your Profile
							</button>
						</a>
					) : (
						<SignUpButton mode="modal">
							<button className="bg-white hover:bg-gray-100 text-blue-600 px-8 py-3 rounded-lg font-semibold transition-colors">
								Start Your Journey
							</button>
						</SignUpButton>
					)}
				</div>
			</section>

			{/* Footer */}
			<footer className="px-4 py-8 bg-gray-900 text-center">
				<p className="text-gray-400">
					© 2024 SeeYou. Built with Next.js and Tailwind CSS.
				</p>
			</footer>
		</div>
	);
}

================
File: src/app/people/page.tsx
================
"use client";

import { useState, useEffect, useCallback } from "react";
import { useUser, UserButton } from "@clerk/nextjs";
import { UserProfile } from "@/models/User";
import Image from "next/image";

interface CurrentUserProfile {
	name: string;
	lastName?: string;
	photoUrl?: string;
	likes: string[];
	matches: string[];
}

interface MatchedUser {
	clerkId: string;
	name: string;
	lastName?: string;
	photoUrl?: string;
}

export default function PeoplePage() {
	const { user } = useUser();
	const [users, setUsers] = useState<UserProfile[]>([]);
	const [currentUserProfile, setCurrentUserProfile] =
		useState<CurrentUserProfile | null>(null);
	const [loading, setLoading] = useState(true);
	const [error, setError] = useState<string | null>(null);
	const [likedUsers, setLikedUsers] = useState<string[]>([]);
	const [showMatchModal, setShowMatchModal] = useState(false);
	const [matchedUser, setMatchedUser] = useState<MatchedUser | null>(null);
	const [matchesCount, setMatchesCount] = useState(0);

	const fetchCurrentUserProfile = useCallback(async () => {
		if (!user?.id) return;

		try {
			const response = await fetch(`/api/user-check?clerkId=${user.id}`);
			const data = await response.json();
			if (data.user) {
				setCurrentUserProfile(data.user);
				setLikedUsers(data.user.likes || []);
				setMatchesCount(data.user.matches?.length || 0);
			}
		} catch (err) {
			console.error("Error fetching current user profile:", err);
		}
	}, [user?.id]);

	const fetchUsers = useCallback(async () => {
		if (!user?.id) return;

		try {
			setLoading(true);
			const response = await fetch(
				`/api/profile?currentUserId=${user.id}`
			);

			if (!response.ok) {
				throw new Error("Failed to fetch users");
			}

			const data = await response.json();
			setUsers(data.users);
		} catch (err) {
			console.error("Error fetching users:", err);
			setError("Failed to load people. Please try again.");
		} finally {
			setLoading(false);
		}
	}, [user?.id]);

	useEffect(() => {
		if (user?.id) {
			fetchUsers();
			fetchCurrentUserProfile();
		}
	}, [user?.id, fetchUsers, fetchCurrentUserProfile]);

	const handleLike = async (likedUserId: string) => {
		try {
			const response = await fetch("/api/like", {
				method: "POST",
				headers: {
					"Content-Type": "application/json",
				},
				body: JSON.stringify({
					likerId: user?.id,
					likedId: likedUserId,
				}),
			});

			const data = await response.json();

			if (data.success) {
				setLikedUsers((prev) => [...prev, likedUserId]);

				if (data.isMatch) {
					const matchedUserData = users.find(
						(u) => u.clerkId === likedUserId
					);
					if (matchedUserData) {
						setMatchedUser(matchedUserData);
						setShowMatchModal(true);
						setMatchesCount((prev) => prev + 1);
					}
				}
			}
		} catch (error) {
			console.error("Error liking user:", error);
			alert("Failed to like user. Please try again.");
		}
	};

	if (loading) {
		return (
			<div className="min-h-screen bg-gradient-to-br from-violet-950 via-purple-900 to-black flex items-center justify-center futuristic-grid">
				<div className="text-center glass-card p-8 rounded-2xl">
					<div className="animate-spin rounded-full h-16 w-16 border-t-4 border-violet-400 mx-auto mb-6 glow-effect"></div>
					<p className="text-violet-300 text-lg font-medium">
						Loading people...
					</p>
				</div>
			</div>
		);
	}

	if (error) {
		return (
			<div className="min-h-screen bg-gradient-to-br from-violet-950 via-purple-900 to-black flex items-center justify-center futuristic-grid">
				<div className="text-center glass-card p-8 rounded-2xl">
					<p className="text-red-400 mb-6">{error}</p>
					<button
						onClick={fetchUsers}
						className="glass-button text-white px-6 py-3 rounded-xl font-medium"
					>
						Try Again
					</button>
				</div>
			</div>
		);
	}

	return (
		<div className="min-h-screen bg-gradient-to-br from-violet-950 via-purple-900 to-black flex flex-col">
			{/* Header */}
			<div className="glass-effect border-b border-violet-500/30">
				<div className="max-w-7xl mx-auto px-4 py-6 flex flex-col md:flex-row justify-between items-start md:items-center gap-4">
					<div className="flex flex-col sm:flex-row items-start gap-6">
						{/* Current User Profile */}
						<div className="flex items-center gap-4">
							{currentUserProfile?.photoUrl ? (
								<div className="w-16 h-16 rounded-full overflow-hidden border-2 border-violet-400 pulse-violet">
									<Image
										src={currentUserProfile.photoUrl}
										alt="Your profile"
										width={64}
										height={64}
										className="w-full h-full object-cover"
									/>
								</div>
							) : (
								<div className="w-16 h-16 rounded-full bg-gradient-to-br from-violet-600 to-purple-700 flex items-center justify-center pulse-violet">
									<span className="text-white font-bold text-xl">
										{currentUserProfile?.name
											?.charAt(0)
											.toUpperCase()}
										{currentUserProfile?.lastName
											?.charAt(0)
											.toUpperCase()}
									</span>
								</div>
							)}
							<div>
								<p className="text-sm font-medium text-white">
									{currentUserProfile?.name}{" "}
									{currentUserProfile?.lastName}
								</p>
								<p className="text-xs text-violet-400 animate-pulse">
									● Online
								</p>
							</div>
						</div>

						{/* Page Title */}
						<div className="mt-1">
							<h1 className="text-2xl md:text-3xl font-bold gradient-text">
								People on SeeYou
							</h1>
							<p className="text-violet-300 mt-1">
								Connect with {users.length} amazing people
							</p>
						</div>
					</div>

					<div className="flex flex-wrap items-center gap-3 mt-2 md:mt-0">
						<a href="/matches" className="relative">
							<button className="glass-button text-white px-4 py-2 rounded-xl font-medium flex items-center gap-2">
								<span>💕</span>
								<span>Matches</span>
							</button>
							{matchesCount > 0 && (
								<span className="absolute -top-2 -right-2 bg-gradient-to-r from-pink-500 to-red-500 text-white text-xs font-bold rounded-full h-6 w-6 flex items-center justify-center animate-pulse">
									{matchesCount}
								</span>
							)}
						</a>
						<a href="/complete-profile">
							<button className="glass-button text-white px-4 py-2 rounded-xl font-medium flex items-center gap-2">
								<span>✏️</span>
								<span>Update</span>
							</button>
						</a>
						<UserButton
							afterSignOutUrl="/"
							appearance={{
								elements: {
									avatarBox:
										"w-10 h-10 rounded-xl border-2 border-violet-400 hover:border-violet-300 transition-all duration-300",
									userButtonTrigger:
										"hover:scale-110 transition-transform duration-300",
								},
							}}
						/>
					</div>
				</div>
			</div>

			{/* Content */}
			<div className="max-w-7xl mx-auto px-4 py-8 flex-1">
				{users.length === 0 ? (
					<div className="text-center py-16">
						<div className="w-24 h-24 glass-card rounded-full mx-auto mb-4 flex items-center justify-center">
							<svg
								className="w-12 h-12 text-violet-400"
								fill="none"
								stroke="currentColor"
								viewBox="0 0 24 24"
							>
								<path
									strokeLinecap="round"
									strokeLinejoin="round"
									strokeWidth={1.5}
									d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 715.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"
								/>
							</svg>
						</div>
						<h3 className="text-xl font-semibold gradient-text mb-2">
							No people found
						</h3>
						<p className="text-violet-300 max-w-md mx-auto mb-6">
							Be the first to complete your profile and start
							connecting with others in the community!
						</p>
						<a href="/complete-profile">
							<button className="glass-button text-white px-6 py-3 rounded-xl font-medium">
								Complete Your Profile
							</button>
						</a>
					</div>
				) : (
					<div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-4 gap-8">
						{users.map((person) => (
							<div
								key={person.clerkId}
								className="glass-card rounded-2xl hover:scale-105 transition-all duration-300 p-8 text-center"
							>
								{/* Profile Photo */}
								<div className="mb-6">
									{person.photoUrl ? (
										<Image
											src={person.photoUrl}
											alt={`${person.name}&apos;s profile`}
											width={112}
											height={112}
											className="w-28 h-28 rounded-full mx-auto object-cover border-3 border-violet-400"
										/>
									) : (
										<div className="w-28 h-28 rounded-full mx-auto bg-gradient-to-br from-violet-600 to-purple-700 flex items-center justify-center">
											<span className="text-white font-bold text-2xl">
												{person.name
													.charAt(0)
													.toUpperCase()}
												{person.lastName
													? person.lastName
															.charAt(0)
															.toUpperCase()
													: ""}
											</span>
										</div>
									)}
								</div>

								{/* Name */}
								<h3 className="font-semibold text-white text-xl mb-4">
									{person.name} {person.lastName}
								</h3>

								{/* Like Button */}
								<button
									onClick={() => handleLike(person.clerkId)}
									disabled={likedUsers.includes(
										person.clerkId
									)}
									className={`w-full py-3 px-6 rounded-xl font-medium transition-all duration-300 flex items-center justify-center gap-2 ${
										likedUsers.includes(person.clerkId)
											? "glass-effect text-gray-400 cursor-not-allowed"
											: "bg-gradient-to-r from-violet-600 via-purple-600 to-pink-600 hover:from-violet-500 hover:via-purple-500 hover:to-pink-500 text-white hover:scale-105"
									}`}
								>
									{likedUsers.includes(person.clerkId) ? (
										<>
											<span>✅</span>
											<span>Liked</span>
										</>
									) : (
										<>
											<span>❤️</span>
											<span>Like</span>
										</>
									)}
								</button>
							</div>
						))}
					</div>
				)}
			</div>

			{/* Match Modal */}
			{showMatchModal && matchedUser && (
				<div className="fixed inset-0 bg-black/80 backdrop-blur-sm flex items-center justify-center z-50 p-4">
					<div className="glass-card rounded-3xl p-8 max-w-md w-full text-center relative overflow-hidden">
						{/* Animated background elements */}
						<div className="absolute -top-20 -left-20 w-40 h-40 bg-violet-600/30 rounded-full blur-xl animate-pulse"></div>
						<div
							className="absolute -bottom-20 -right-20 w-40 h-40 bg-purple-600/30 rounded-full blur-xl animate-pulse"
							style={{ animationDelay: "1s" }}
						></div>

						<div className="relative z-10">
							<h2 className="text-3xl font-bold gradient-text mb-6">
								✨ It&apos;s a Match! ✨
							</h2>
							<div className="flex justify-center mb-6">
								<div className="relative">
									{/* Current user */}
									{currentUserProfile?.photoUrl ? (
										<Image
											src={currentUserProfile.photoUrl}
											alt="Your profile"
											width={80}
											height={80}
											className="w-20 h-20 rounded-full object-cover border-4 border-pink-400"
										/>
									) : (
										<div className="w-20 h-20 rounded-full bg-gradient-to-br from-pink-600 to-violet-600 flex items-center justify-center">
											<span className="text-white font-bold text-xl">
												{currentUserProfile?.name
													?.charAt(0)
													.toUpperCase()}
												{currentUserProfile?.lastName
													?.charAt(0)
													.toUpperCase()}
											</span>
										</div>
									)}

									{/* Matched user */}
									{matchedUser.photoUrl ? (
										<Image
											src={matchedUser.photoUrl}
											alt={matchedUser.name}
											width={80}
											height={80}
											className="w-20 h-20 rounded-full object-cover border-4 border-violet-400 absolute left-16"
										/>
									) : (
										<div className="w-20 h-20 rounded-full bg-gradient-to-br from-violet-600 to-purple-700 flex items-center justify-center absolute left-16">
											<span className="text-white font-bold text-xl">
												{matchedUser.name
													.charAt(0)
													.toUpperCase()}
												{matchedUser.lastName
													?.charAt(0)
													.toUpperCase()}
											</span>
										</div>
									)}

									{/* Animated heart */}
									<div className="absolute left-14 top-7 w-8 h-8 bg-gradient-to-r from-pink-500 to-red-500 rounded-full flex items-center justify-center animate-bounce">
										<span className="text-white">❤️</span>
									</div>
								</div>
							</div>

							<p className="text-xl text-white mb-8">
								You and{" "}
								<span className="gradient-text font-bold">
									{matchedUser.name} {matchedUser.lastName}
								</span>{" "}
								liked each other!
							</p>

							<div className="flex flex-col sm:flex-row gap-4 justify-center">
								<button
									onClick={() => setShowMatchModal(false)}
									className="glass-button text-white px-6 py-3 rounded-xl font-medium flex-1"
								>
									Continue Browsing
								</button>
								<a href="/matches">
									<button
										onClick={() => setShowMatchModal(false)}
										className="bg-gradient-to-r from-pink-600 to-violet-600 hover:from-pink-500 hover:to-violet-500 text-white px-6 py-3 rounded-xl font-medium w-full"
									>
										View All Matches
									</button>
								</a>
							</div>
						</div>
					</div>
				</div>
			)}

			{/* Footer */}
			<div className="glass-effect border-t border-violet-500/30 py-6 mt-auto">
				<div className="max-w-7xl mx-auto px-4">
					<div className="flex flex-col md:flex-row justify-between items-center">
						<div className="mb-4 md:mb-0">
							<h3 className="text-xl font-bold gradient-text">
								SeeYou
							</h3>
							<p className="text-violet-400 text-sm mt-1">
								Connecting souls since 2024
							</p>
						</div>
					</div>
					<div className="mt-8 text-center text-violet-500 text-sm">
						<p>© 2024 SeeYou App. All rights reserved.</p>
						<div className="mt-2 flex flex-wrap justify-center gap-4">
							{[
								"Privacy Policy",
								"Terms of Service",
								"Contact Us",
								"Careers",
							].map((link) => (
								<a
									key={link}
									href="#"
									className="hover:text-violet-300 transition-colors"
								>
									{link}
								</a>
							))}
						</div>
					</div>
				</div>
			</div>
		</div>
	);
}

================
File: src/app/complete-profile/page.tsx
================
"use client";

import { useState, useEffect, useCallback } from "react";
import { useUser } from "@clerk/nextjs";
import { CldUploadWidget } from "next-cloudinary";
import { useRouter } from "next/navigation";
import Image from "next/image";

interface UserProfileData {
	name: string;
	lastName: string;
	phone: string;
	instagramId: string;
	photoUrl: string;
}

export default function CompleteProfile() {
	const { user } = useUser();
	const router = useRouter();
	const [formData, setFormData] = useState<UserProfileData>({
		name: "",
		lastName: "",
		phone: "",
		instagramId: "",
		photoUrl: "",
	});
	const [loading, setLoading] = useState(false);
	const [photoUploading, setPhotoUploading] = useState(false);
	const [fetchingProfile, setFetchingProfile] = useState(true);

	const fetchUserProfile = useCallback(async () => {
		if (!user?.id) return;

		try {
			setFetchingProfile(true);
			const response = await fetch(`/api/user-check?clerkId=${user.id}`);
			const data = await response.json();

			if (data.exists && data.user) {
				setFormData({
					name: data.user.name || "",
					lastName: data.user.lastName || "",
					phone: data.user.phone || "",
					instagramId: data.user.instagramId || "",
					photoUrl: data.user.photoUrl || "",
				});
			}
		} catch (error) {
			console.error("Error fetching user profile:", error);
		} finally {
			setFetchingProfile(false);
		}
	}, [user?.id]);

	useEffect(() => {
		if (user?.id) {
			fetchUserProfile();
		}
	}, [user?.id, fetchUserProfile]);

	const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
		const { name, value } = e.target;
		setFormData((prev) => ({
			...prev,
			[name]: value,
		}));
	};

	const handleSubmit = async (e: React.FormEvent) => {
		e.preventDefault();
		if (!formData.name.trim()) {
			alert("Name is required");
			return;
		}

		setLoading(true);
		try {
			const response = await fetch("/api/profile", {
				method: "POST",
				headers: {
					"Content-Type": "application/json",
				},
				body: JSON.stringify({
					clerkId: user?.id,
					...formData,
				}),
			});

			if (response.ok) {
				router.push("/people");
			} else {
				throw new Error("Failed to save profile");
			}
		} catch (error) {
			console.error("Error saving profile:", error);
			alert("Error saving profile. Please try again.");
		} finally {
			setLoading(false);
		}
	};

	if (fetchingProfile) {
		return (
			<div className="min-h-screen bg-gradient-to-br from-violet-950 via-purple-900 to-black py-6 sm:py-12 flex items-center justify-center">
				<div className="text-center glass-card p-8 rounded-2xl">
					<div className="animate-spin rounded-full h-16 w-16 border-t-4 border-violet-400 mx-auto mb-6"></div>
					<p className="text-violet-300 text-lg font-medium">
						Loading your profile...
					</p>
				</div>
			</div>
		);
	}

	return (
		<div className="min-h-screen bg-gradient-to-br from-violet-950 via-purple-900 to-black py-6 sm:py-12 flex flex-col">
			<div className="max-w-2xl mx-auto px-4 sm:px-6 flex-1">
				<div className="glass-card p-6 sm:p-8 rounded-2xl">
					<h1 className="text-2xl sm:text-3xl font-bold gradient-text mb-2">
						Complete Your Profile
					</h1>
					<p className="text-violet-400 mb-6 sm:mb-8 text-sm sm:text-base">
						Tell us more about yourself to get started with SeeYou.
					</p>

					<form
						onSubmit={handleSubmit}
						className="space-y-4 sm:space-y-6"
					>
						{/* Photo Upload */}
						<div className="text-center">
							<div className="mb-4">
								{formData.photoUrl ? (
									<Image
										src={formData.photoUrl}
										alt="Profile"
										width={128}
										height={128}
										className="w-24 sm:w-32 h-24 sm:h-32 rounded-full mx-auto object-cover border-4 border-violet-400"
									/>
								) : (
									<div className="w-24 sm:w-32 h-24 sm:h-32 rounded-full mx-auto bg-gradient-to-br from-violet-600 to-purple-800 flex items-center justify-center">
										<svg
											className="w-10 sm:w-12 h-10 sm:h-12 text-gray-300"
											fill="none"
											stroke="currentColor"
											viewBox="0 0 24 24"
										>
											<path
												strokeLinecap="round"
												strokeLinejoin="round"
												strokeWidth={2}
												d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"
											/>
										</svg>
									</div>
								)}
							</div>
							<CldUploadWidget
								uploadPreset="seeyouprofiles"
								options={{
									folder: "seeyou/profiles",
									maxFileSize: 10000000,
									sources: ["local", "camera"],
									multiple: false,
									resourceType: "image",
									clientAllowedFormats: [
										"jpg",
										"jpeg",
										"png",
										"gif",
										"webp",
									],
									cropping: false,
									showAdvancedOptions: false,
									showCompletedButton: true,
									showUploadMoreButton: false,
								}}
								onSuccess={(result) => {
									console.log("Upload success:", result);
									// eslint-disable-next-line @typescript-eslint/no-explicit-any
									if ((result as any)?.info?.secure_url) {
										setFormData((prev) => ({
											...prev,
											// eslint-disable-next-line @typescript-eslint/no-explicit-any
											photoUrl: (result as any).info
												.secure_url,
										}));
									}
									setPhotoUploading(false);
								}}
								onError={(error) => {
									console.error("Upload error:", error);
									setPhotoUploading(false);
									alert("Upload failed. Please try again.");
								}}
							>
								{({ open }) => (
									<button
										type="button"
										onClick={() => {
											setPhotoUploading(true);
											open();
										}}
										disabled={photoUploading}
										className="glass-button text-white px-4 py-2 rounded-xl font-medium transition-all duration-300 disabled:opacity-50 text-sm sm:text-base"
									>
										{photoUploading
											? "Uploading..."
											: "Upload Photo"}
									</button>
								)}
							</CldUploadWidget>
						</div>

						{/* Form Fields */}
						<div className="grid grid-cols-1 sm:grid-cols-2 gap-4 sm:gap-6">
							{/* Name Field */}
							<div className="sm:col-span-2">
								<label
									htmlFor="name"
									className="block text-sm font-medium text-gray-300 mb-2"
								>
									Name *
								</label>
								<input
									type="text"
									id="name"
									name="name"
									required
									value={formData.name}
									onChange={handleInputChange}
									className="w-full px-3 py-2 sm:py-3 bg-gray-700/50 border border-violet-500/30 rounded-lg focus:ring-2 focus:ring-violet-500 focus:border-transparent text-white placeholder-gray-400 text-sm sm:text-base"
									placeholder="Enter your first name"
								/>
							</div>

							{/* Last Name Field */}
							<div className="sm:col-span-2">
								<label
									htmlFor="lastName"
									className="block text-sm font-medium text-gray-300 mb-2"
								>
									Last Name
								</label>
								<input
									type="text"
									id="lastName"
									name="lastName"
									value={formData.lastName}
									onChange={handleInputChange}
									className="w-full px-3 py-2 sm:py-3 bg-gray-700/50 border border-violet-500/30 rounded-lg focus:ring-2 focus:ring-violet-500 focus:border-transparent text-white placeholder-gray-400 text-sm sm:text-base"
									placeholder="Enter your last name"
								/>
							</div>

							{/* Phone Field */}
							<div>
								<label
									htmlFor="phone"
									className="block text-sm font-medium text-gray-300 mb-2"
								>
									Phone Number
								</label>
								<input
									type="tel"
									id="phone"
									name="phone"
									value={formData.phone}
									onChange={handleInputChange}
									className="w-full px-3 py-2 sm:py-3 bg-gray-700/50 border border-violet-500/30 rounded-lg focus:ring-2 focus:ring-violet-500 focus:border-transparent text-white placeholder-gray-400 text-sm sm:text-base"
									placeholder="Your phone number"
								/>
							</div>

							{/* Instagram ID Field */}
							<div>
								<label
									htmlFor="instagramId"
									className="block text-sm font-medium text-gray-300 mb-2"
								>
									Instagram ID
								</label>
								<input
									type="text"
									id="instagramId"
									name="instagramId"
									value={formData.instagramId}
									onChange={handleInputChange}
									className="w-full px-3 py-2 sm:py-3 bg-gray-700/50 border border-violet-500/30 rounded-lg focus:ring-2 focus:ring-violet-500 focus:border-transparent text-white placeholder-gray-400 text-sm sm:text-base"
									placeholder="@username"
								/>
							</div>
						</div>

						{/* Submit Button */}
						<button
							type="submit"
							disabled={loading || !formData.name.trim()}
							className="w-full bg-gradient-to-r from-violet-600 via-purple-600 to-pink-600 hover:from-violet-500 hover:via-purple-500 hover:to-pink-500 disabled:from-gray-600 disabled:to-gray-600 text-white py-3 sm:py-4 rounded-xl font-semibold transition-all duration-300 transform hover:scale-105 disabled:hover:scale-100 text-sm sm:text-base"
						>
							{loading ? "Saving..." : "Update Profile"}
						</button>
					</form>
				</div>
			</div>
		</div>
	);
}




================================================================
End of Codebase
================================================================
